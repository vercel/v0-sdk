{
  "openapi": "3.1.0",
  "info": {
    "title": "v0 Platform API (beta)",
    "version": "1",
    "description": "Full stack vibe coding API",
    "termsOfService": "https://vercel.com/legal/api-terms"
  },
  "externalDocs": {
    "description": "Find more info here",
    "url": "https://vercel.com/docs/v0/api"
  },
  "servers": [
    {
      "url": "https://api.v0.dev/v1"
    }
  ],
  "tags": [
    {
      "name": "chats",
      "description": "Chats"
    }
  ],
  "paths": {
    "/chats": {
      "post": {
        "summary": "Create Chat",
        "description": "Creates a new chat using a user message, optional system context, and model configuration. Useful for prompting the model within the scope of a specific project.",
        "operationId": "chats.create",
        "tags": ["chats"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "description": "Creates a new chat using a user message, optional system context, and model configuration. Useful for prompting the model within the scope of a specific project.",
                    "type": "string"
                  },
                  "attachments": {
                    "description": "A list of files or assets to be included in the conversation context. Useful when the chat or task requires referencing documents, images, or other resources.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": ["url"],
                      "additionalProperties": false
                    }
                  },
                  "system": {
                    "description": "Provides system-level context or background for the chat. This is typically used to specify frameworks, tools, or development environments relevant to the task.",
                    "type": "string"
                  },
                  "chatPrivacy": {
                    "description": "Determines the privacy setting of the chat. This can control whether the chat is visible only to the user, to team members, or is public.",
                    "default": "private",
                    "type": "string",
                    "enum": [
                      "public",
                      "private",
                      "team-edit",
                      "team",
                      "unlisted"
                    ]
                  },
                  "projectId": {
                    "description": "Associates the chat with a specific project in your workspace. Helps organize and group related chats under a common project context.",
                    "type": "string"
                  },
                  "modelConfiguration": {
                    "description": "Settings that control how the model behaves in the chat.",
                    "type": "object",
                    "properties": {
                      "modelId": {
                        "default": "v0-1.5-md",
                        "description": "Deprecated Model ID field preserved for backward compatibility.",
                        "deprecated": true,
                        "type": "string",
                        "enum": [
                          "v0-1.5-sm",
                          "v0-1.5-md",
                          "v0-1.5-lg",
                          "v0-gpt-5"
                        ]
                      },
                      "imageGenerations": {
                        "default": false,
                        "description": "Enables image generations to generate up to 5 images per version.",
                        "type": "boolean"
                      },
                      "thinking": {
                        "default": false,
                        "description": "Enables thinking to generate a response in multiple steps.",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "responseMode": {
                    "description": "Controls how the response is delivered.\n\n- `\"sync\"`: The response is returned immediately with the HTTP request.\n- `\"async\"`: Returns a message placeholder immediately; use getById to poll for completion status and final output.\n- `\"experimental_stream\"`: Returns content parts as Server-Sent Events for real-time streaming.",
                    "default": "sync",
                    "type": "string",
                    "enum": ["sync", "async", "experimental_stream"]
                  },
                  "designSystemId": {
                    "description": "The ID of a design system to apply to this chat. Design systems provide consistent styling and components for generated UI.",
                    "type": ["string", "null"]
                  }
                },
                "required": ["message"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "get": {
        "summary": "Find Chats",
        "description": "Retrieves a list of existing chats, with support for pagination and filtering by favorite status. Helps manage and navigate chat history.",
        "operationId": "chats.find",
        "tags": ["chats"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChatSummary"
                      }
                    }
                  },
                  "required": ["object", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Specifies the maximum number of chat records to return in a single response. Useful for paginating results when there are many chats.",
              "default": 60,
              "type": "number",
              "maximum": 60
            },
            "description": "Specifies the maximum number of chat records to return in a single response. Useful for paginating results when there are many chats."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Determines the starting point for pagination. Used in conjunction with limit to retrieve a specific page of chat results.",
              "default": 0,
              "type": "number"
            },
            "description": "Determines the starting point for pagination. Used in conjunction with limit to retrieve a specific page of chat results."
          },
          {
            "name": "isFavorite",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filters chats by their \"favorite\" status. Accepts `\"true\"` or `\"false\"` (as strings, not booleans).\n\n- `\"true\"`: returns only chats marked as favorites.\n- `\"false\"`: returns only non-favorite chats.",
              "type": "string",
              "enum": ["true", "false"]
            },
            "description": "Filters chats by their \"favorite\" status. Accepts `\"true\"` or `\"false\"` (as strings, not booleans).\n\n- `\"true\"`: returns only chats marked as favorites.\n- `\"false\"`: returns only non-favorite chats."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/chats/init": {
      "post": {
        "summary": "Initialize Chat",
        "description": "Initializes a new chat from source content such as files, repositories, registries, or zip archives. Enables context-rich conversations based on code or assets.",
        "operationId": "chats.init",
        "tags": ["chats"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "A user-defined name for the chat. Helps identify or describe the purpose of the chat session in the UI or API responses.",
                        "type": "string"
                      },
                      "chatPrivacy": {
                        "description": "Controls the visibility of the chat. Defines whether the chat is private, shared with a team, or publicly accessible.",
                        "default": "private",
                        "type": "string",
                        "enum": [
                          "public",
                          "private",
                          "team-edit",
                          "team",
                          "unlisted"
                        ]
                      },
                      "projectId": {
                        "description": "Associates the chat with a specific project. Useful for organizing and grouping chats in a workspace.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "description": "Specifies the initialization method. For this endpoint, it defines the source of content being used to initialize the chat.",
                            "type": "string",
                            "const": "files"
                          },
                          "files": {
                            "description": "An array of inline file objects used to initialize the chat. Each object must contain a file `name` and its `content`.",
                            "type": "array",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "url": {
                                      "type": "string"
                                    },
                                    "locked": {
                                      "description": "Whether to lock this file to prevent AI from overwriting it during generation",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": ["name", "url"],
                                  "additionalProperties": false
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "content": {
                                      "type": "string"
                                    },
                                    "locked": {
                                      "description": "Whether to lock this file to prevent AI from overwriting it during generation",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": ["name", "content"],
                                  "additionalProperties": false
                                }
                              ]
                            }
                          }
                        },
                        "required": ["type", "files"],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "description": "Specifies the initialization method. For this endpoint, it defines the source of content being used to initialize the chat.",
                            "type": "string",
                            "const": "repo"
                          },
                          "repo": {
                            "description": "Specifies a repository source for initialization. Supports both public and private GitHub repositories. For private repositories, ensure your GitHub account is connected through Vercel.",
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": "string"
                              },
                              "branch": {
                                "type": "string",
                                "maxLength": 250
                              }
                            },
                            "required": ["url"],
                            "additionalProperties": false
                          },
                          "lockAllFiles": {
                            "description": "Whether to lock all files in the repository to prevent AI from overwriting them during generation",
                            "type": "boolean"
                          }
                        },
                        "required": ["type", "repo"],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "description": "Specifies the initialization method. For this endpoint, it defines the source of content being used to initialize the chat.",
                            "type": "string",
                            "const": "registry"
                          },
                          "registry": {
                            "description": "Allows initialization from a predefined component or code registry. Includes the registry source and identifier for the desired component/module.",
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": "string"
                              }
                            },
                            "required": ["url"],
                            "additionalProperties": false
                          },
                          "lockAllFiles": {
                            "description": "Whether to lock all files from the registry to prevent AI from overwriting them during generation",
                            "type": "boolean"
                          }
                        },
                        "required": ["type", "registry"],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "description": "Specifies the initialization method. For this endpoint, it defines the source of content being used to initialize the chat.",
                            "type": "string",
                            "const": "zip"
                          },
                          "zip": {
                            "description": "Provides a zipped bundle of files as the input source. Typically includes a base64-encoded archive or a remote URL reference.",
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": "string",
                                "format": "uri"
                              }
                            },
                            "required": ["url"],
                            "additionalProperties": false
                          },
                          "lockAllFiles": {
                            "description": "Whether to lock all files from the zip archive to prevent AI from overwriting them during generation",
                            "type": "boolean"
                          }
                        },
                        "required": ["type", "zip"],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "description": "Specifies the initialization method. For this endpoint, it defines the source of content being used to initialize the chat.",
                            "type": "string",
                            "const": "template"
                          },
                          "templateId": {
                            "description": "The ID of the template to initialize the chat from. This should be a valid template ID from the v0 template system.",
                            "type": "string"
                          }
                        },
                        "required": ["type", "templateId"],
                        "additionalProperties": false
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/chats/{chatId}": {
      "delete": {
        "summary": "Delete Chat",
        "description": "Deletes a specific chat based on the provided chatId. This operation is irreversible and permanently removes the chat and its contents.",
        "operationId": "chats.delete",
        "tags": ["chats"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "object": {
                      "type": "string",
                      "const": "chat"
                    },
                    "deleted": {
                      "type": "boolean",
                      "const": true
                    }
                  },
                  "required": ["id", "object", "deleted"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the chat to delete. This must be passed as a path parameter in the URL."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "get": {
        "summary": "Get Chat",
        "description": "Retrieves the full details of a specific chat using its `chatId`. Includes messages, metadata, and associated configuration.",
        "operationId": "chats.getById",
        "tags": ["chats"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the chat to retrieve. Must be provided as a path parameter."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "patch": {
        "summary": "Update Chat",
        "description": "Updates the metadata of an existing chat using its `chatId`. Supports changes to the chat name and privacy setting.",
        "operationId": "chats.update",
        "tags": ["chats"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "A new name to assign to the chat. Helps with identification and organization.",
                    "type": "string"
                  },
                  "privacy": {
                    "description": "Sets the privacy level of the chat.",
                    "type": "string",
                    "enum": [
                      "public",
                      "private",
                      "team",
                      "team-edit",
                      "unlisted"
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the chat to update. Provided as a path parameter."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/chats/{chatId}/favorite": {
      "put": {
        "summary": "Favorite Chat",
        "description": "Marks or unmarks a chat as a favorite using its `chatId`. This helps with organizing and quickly accessing important chats.",
        "operationId": "chats.favorite",
        "tags": ["chats"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isFavorite": {
                    "description": "Specifies whether the chat should be marked as a favorite.\n\n- `\"true\"`: mark as favorite\n- `\"false\"`: remove from favorites",
                    "type": "boolean"
                  }
                },
                "required": ["isFavorite"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "object": {
                      "type": "string",
                      "const": "chat"
                    },
                    "favorited": {
                      "type": "boolean"
                    }
                  },
                  "required": ["id", "object", "favorited"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the chat to update. Provided as a path parameter."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/chats/{chatId}/fork": {
      "post": {
        "summary": "Fork Chat",
        "description": "Creates a new chat fork (duplicate) from a specific version within an existing chat. Useful for branching off alternate directions without modifying the original conversation.",
        "operationId": "chats.fork",
        "tags": ["chats"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "versionId": {
                    "description": "The identifier of the specific chat version to fork from. If omitted, the latest version will be used.",
                    "type": "string",
                    "maxLength": 32
                  },
                  "privacy": {
                    "description": "Determines the privacy setting of the forked chat. This can control whether the chat is visible only to the user, to team members, or is public.",
                    "default": "private",
                    "type": "string",
                    "enum": [
                      "public",
                      "private",
                      "team",
                      "team-edit",
                      "unlisted"
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the chat to fork. Provided as a path parameter."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/chats/{chatId}/project": {
      "get": {
        "summary": "Get Project by Chat ID",
        "description": "Retrieves the v0 project associated with a given chat. Useful for determining the context or scope of a chat session.",
        "operationId": "projects.getByChatId",
        "tags": ["projects"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the chat to retrieve the associated project for."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/chats/{chatId}/messages": {
      "get": {
        "summary": "Find Chat Messages",
        "description": "Retrieves a list of all messages for a specific chat, ordered by creation date (newest first). Supports cursor-based pagination and includes message content, role, and type information.",
        "operationId": "chats.findMessages",
        "tags": ["chats"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessageSummary"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "hasMore": {
                          "type": "boolean"
                        },
                        "nextCursor": {
                          "type": "string"
                        },
                        "nextUrl": {
                          "type": "string"
                        }
                      },
                      "required": ["hasMore"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["object", "data", "pagination"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the chat to retrieve messages for. Provided as a path parameter."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Specifies the maximum number of message records to return in a single response. Useful for paginating results when there are many messages.",
              "default": 20,
              "type": "number",
              "minimum": 1,
              "maximum": 150
            },
            "description": "Specifies the maximum number of message records to return in a single response. Useful for paginating results when there are many messages."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Base64 encoded cursor containing pagination data",
              "type": "string"
            },
            "description": "Base64 encoded cursor containing pagination data"
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "summary": "Send Message",
        "description": "Creates a new message in an existing chat. Triggers a model response using the provided prompt, with optional attachments and configuration settings.",
        "operationId": "chats.sendMessage",
        "tags": ["chats"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "description": "The prompt or instruction to send to the model as part of the chat.",
                    "type": "string"
                  },
                  "attachments": {
                    "description": "A list of files or assets to include with the message.",
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": ["url"],
                      "additionalProperties": false
                    }
                  },
                  "modelConfiguration": {
                    "description": "Overrides for the model behavior.",
                    "type": "object",
                    "properties": {
                      "modelId": {
                        "default": "v0-1.5-md",
                        "description": "Deprecated Model ID field preserved for backward compatibility.",
                        "deprecated": true,
                        "type": "string",
                        "enum": [
                          "v0-1.5-sm",
                          "v0-1.5-md",
                          "v0-1.5-lg",
                          "v0-gpt-5"
                        ]
                      },
                      "imageGenerations": {
                        "default": false,
                        "description": "Enables image generations to generate up to 5 images per version.",
                        "type": "boolean"
                      },
                      "thinking": {
                        "default": false,
                        "description": "Enables thinking to generate a response in multiple steps.",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "responseMode": {
                    "description": "Controls how the response is delivered.\n\n- `\"sync\"`: The response is returned immediately with the HTTP request.\n- `\"async\"`: Returns a message placeholder immediately; use getById to poll for completion status and final output.\n- `\"experimental_stream\"`: Returns content parts as Server-Sent Events for real-time streaming.",
                    "default": "sync",
                    "type": "string",
                    "enum": ["sync", "async", "experimental_stream"]
                  }
                },
                "required": ["message"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the chat to send the message to. Provided as a path parameter."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/chats/{chatId}/messages/{messageId}": {
      "get": {
        "summary": "Get Chat Message",
        "description": "Retrieves detailed information about a specific message within a chat, including content, files, model configuration, and demo URLs.",
        "operationId": "chats.getMessage",
        "tags": ["chats"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the chat containing the message. Provided as a path parameter."
          },
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the message to retrieve. Provided as a path parameter."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/chats/{chatId}/versions": {
      "get": {
        "summary": "Find Chat Versions",
        "description": "Retrieves a list of all versions (iterations) for a specific chat, ordered by creation date (newest first). Supports cursor-based pagination and includes version status and demo URLs.",
        "operationId": "chats.findVersions",
        "tags": ["chats"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/VersionSummary"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "hasMore": {
                          "type": "boolean"
                        },
                        "nextCursor": {
                          "type": "string"
                        },
                        "nextUrl": {
                          "type": "string"
                        }
                      },
                      "required": ["hasMore"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["object", "data", "pagination"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the chat to retrieve versions for. Provided as a path parameter."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Specifies the maximum number of version records to return in a single response. Useful for paginating results when there are many versions.",
              "default": 20,
              "type": "number",
              "minimum": 1,
              "maximum": 150
            },
            "description": "Specifies the maximum number of version records to return in a single response. Useful for paginating results when there are many versions."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Base64 encoded cursor containing pagination data",
              "type": "string"
            },
            "description": "Base64 encoded cursor containing pagination data"
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/chats/{chatId}/versions/{versionId}": {
      "get": {
        "summary": "Get Chat Version",
        "description": "Retrieves detailed information about a specific version of a chat, including all files with their content and lock status.",
        "operationId": "chats.getVersion",
        "tags": ["chats"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the chat containing the version. Provided as a path parameter."
          },
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the version to retrieve. Provided as a path parameter."
          },
          {
            "name": "includeDefaultFiles",
            "in": "query",
            "required": false,
            "schema": {
              "description": "When true, includes all default files (package.json, configuration files, etc.) that would be part of a ZIP download. When false or omitted, returns only the generated source files.",
              "type": "string",
              "enum": ["true", "false"]
            },
            "description": "When true, includes all default files (package.json, configuration files, etc.) that would be part of a ZIP download. When false or omitted, returns only the generated source files."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "patch": {
        "summary": "Update Chat Version Files",
        "description": "Updates the source files of a specific chat version (block) manually. This allows editing generated files directly through the API.",
        "operationId": "chats.updateVersion",
        "tags": ["chats"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "description": "Array of files to update with their new content",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "The full file path including extension (e.g., \"components/test.tsx\")",
                          "type": "string"
                        },
                        "content": {
                          "description": "The new content for the file",
                          "type": "string"
                        },
                        "locked": {
                          "description": "Whether to lock or unlock the file to prevent AI from overwriting it during generation",
                          "type": "boolean"
                        }
                      },
                      "required": ["name", "content"],
                      "additionalProperties": false
                    }
                  }
                },
                "required": ["files"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the chat containing the version to update. Provided as a path parameter."
          },
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the version (block) to update. Provided as a path parameter."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/chats/{chatId}/versions/{versionId}/download": {
      "get": {
        "summary": "Download version files",
        "description": "Download all files for a specific chat version as a zip or tarball archive. Use includeDefaultFiles=true to include all deployment files (package.json, configuration files, etc.) or false/omitted to return only the generated source files.",
        "operationId": "chats.downloadVersion",
        "tags": ["chats"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "ZIP archive containing the version files"
                }
              },
              "application/gzip": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "Gzipped tar archive containing the version files"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the chat containing the version. Provided as a path parameter."
          },
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the version to download. Provided as a path parameter."
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "description": "The archive format for the download. Choose \"zip\" for broad compatibility or \"tarball\" for Unix/Linux systems.",
              "default": "zip",
              "type": "string",
              "enum": ["zip", "tarball"]
            },
            "description": "The archive format for the download. Choose \"zip\" for broad compatibility or \"tarball\" for Unix/Linux systems."
          },
          {
            "name": "includeDefaultFiles",
            "in": "query",
            "required": false,
            "schema": {
              "description": "When true, includes all default files (package.json, configuration files, etc.) that would be part of a complete deployment. When false or omitted, returns only the generated source files.",
              "type": "string",
              "enum": ["true", "false"]
            },
            "description": "When true, includes all default files (package.json, configuration files, etc.) that would be part of a complete deployment. When false or omitted, returns only the generated source files."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/chats/{chatId}/messages/{messageId}/resume": {
      "post": {
        "summary": "Resume Message",
        "description": "Resumes processing of a previously interrupted or incomplete message in a chat. Useful for continuing generation when a message was paused or stopped.",
        "operationId": "chats.resume",
        "tags": ["chats"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the chat containing the message to resume. Provided as a path parameter."
          },
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the specific message to resume. Provided as a path parameter."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/deployments": {
      "get": {
        "summary": "Find Deployments",
        "description": "Find deployments by project and chat IDs. This will return a list of deployments for the given project and chat IDs.",
        "operationId": "deployments.find",
        "tags": ["deployments"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentDetail"
                      }
                    }
                  },
                  "required": ["object", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "schema": {
              "description": "The ID of the project to find deployments for",
              "type": "string"
            },
            "description": "The ID of the project to find deployments for"
          },
          {
            "name": "chatId",
            "in": "query",
            "required": true,
            "schema": {
              "description": "The ID of the chat to find deployments for",
              "type": "string"
            },
            "description": "The ID of the chat to find deployments for"
          },
          {
            "name": "versionId",
            "in": "query",
            "required": true,
            "schema": {
              "description": "The ID of the version to find deployments for",
              "type": "string"
            },
            "description": "The ID of the version to find deployments for"
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "summary": "Create Deployment",
        "description": "Create a new deployment for a specific chat and version. This will trigger a deployment to Vercel.",
        "operationId": "deployments.create",
        "tags": ["deployments"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "chatId": {
                    "type": "string"
                  },
                  "versionId": {
                    "type": "string"
                  }
                },
                "required": ["projectId", "chatId", "versionId"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/deployments/{deploymentId}": {
      "get": {
        "summary": "Get Deployment",
        "description": "Get a deployment by ID. This will return the details of the deployment, including the inspector URL, chat ID, project ID, version ID, API URL, and web URL.",
        "operationId": "deployments.getById",
        "tags": ["deployments"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "deploymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Path parameter \"deploymentId\""
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Deployment",
        "description": "Delete a deployment by ID. This will delete the deployment from Vercel.",
        "operationId": "deployments.delete",
        "tags": ["deployments"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "object": {
                      "type": "string",
                      "const": "deployment"
                    },
                    "deleted": {
                      "type": "boolean",
                      "const": true
                    }
                  },
                  "required": ["id", "object", "deleted"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "deploymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Path parameter \"deploymentId\""
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/deployments/{deploymentId}/logs": {
      "get": {
        "summary": "Find Deployment Logs",
        "description": "Retrieves logs for a specific deployment. Supports filtering by timestamp to fetch only recent logs.",
        "operationId": "deployments.findLogs",
        "tags": ["deployments"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logs": {
                      "description": "Array of log entries.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "createdAt": {
                            "description": "Log creation timestamp.",
                            "type": "string"
                          },
                          "deploymentId": {
                            "description": "Deployment ID.",
                            "type": "string"
                          },
                          "id": {
                            "description": "Log entry ID.",
                            "type": "string"
                          },
                          "text": {
                            "description": "Log message content.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Output stream type.",
                            "type": "string",
                            "enum": ["stdout", "stderr"]
                          },
                          "level": {
                            "description": "Log severity level.",
                            "default": "info",
                            "type": "string",
                            "enum": ["error", "warning", "info"]
                          },
                          "object": {
                            "description": "Object type identifier.",
                            "type": "string",
                            "const": "deployment_log"
                          }
                        },
                        "required": [
                          "createdAt",
                          "deploymentId",
                          "id",
                          "text",
                          "type",
                          "object"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "nextSince": {
                      "description": "Timestamp for pagination.",
                      "type": "number"
                    },
                    "object": {
                      "description": "Object type identifier.",
                      "type": "string",
                      "const": "list"
                    }
                  },
                  "required": ["logs", "object"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "deploymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the deployment to retrieve logs for. Provided as a path parameter."
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "description": "A UNIX timestamp (in seconds) used to filter logs. Returns only log entries generated after the specified time.",
              "type": "number"
            },
            "description": "A UNIX timestamp (in seconds) used to filter logs. Returns only log entries generated after the specified time."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/deployments/{deploymentId}/errors": {
      "get": {
        "summary": "Find Deployment Errors",
        "description": "Retrieves a list of errors that occurred during a specific deployment. Useful for diagnosing and debugging deployment issues.",
        "operationId": "deployments.findErrors",
        "tags": ["deployments"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "fullErrorText": {
                      "type": "string"
                    },
                    "errorType": {
                      "type": "string"
                    },
                    "formattedError": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "deploymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the deployment to inspect for errors. Provided as a path parameter."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/hooks": {
      "get": {
        "summary": "Find Hooks",
        "description": "Retrieves a list of existing hooks in your workspace. Useful for managing active webhooks tied to chat events or deployments.",
        "operationId": "hooks.find",
        "tags": ["hooks"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HookSummary"
                      }
                    }
                  },
                  "required": ["object", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "summary": "Create Hook",
        "description": "Creates a new webhook that listens for specific events. Supports optional association with a chat.",
        "operationId": "hooks.create",
        "tags": ["hooks"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "A human-readable name for the hook.",
                    "type": "string"
                  },
                  "events": {
                    "description": "List of event types the hook should subscribe to.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "chat.created",
                        "chat.updated",
                        "chat.deleted",
                        "message.created",
                        "message.updated",
                        "message.deleted",
                        "message.finished"
                      ]
                    }
                  },
                  "chatId": {
                    "description": "The ID of a chat to scope the hook to.",
                    "type": "string"
                  },
                  "url": {
                    "description": "The target URL to receive the webhook payloads.",
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": ["name", "events", "url"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/hooks/{hookId}": {
      "get": {
        "summary": "Get Hook",
        "description": "Retrieves the details of a specific webhook using its ID.",
        "operationId": "hooks.getById",
        "tags": ["hooks"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the hook to retrieve."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "patch": {
        "summary": "Update Hook",
        "description": "Updates the configuration of an existing webhook, including its name, event subscriptions, or target URL.",
        "operationId": "hooks.update",
        "tags": ["hooks"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "A new name for the hook.",
                    "type": "string"
                  },
                  "events": {
                    "description": "Updated list of event types to subscribe to.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "chat.created",
                        "chat.updated",
                        "chat.deleted",
                        "message.created",
                        "message.updated",
                        "message.deleted",
                        "message.finished"
                      ]
                    }
                  },
                  "url": {
                    "description": "A new URL to send webhook payloads to.",
                    "type": "string",
                    "format": "uri"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the webhook to update. Provided as a path parameter."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Hook",
        "description": "Deletes a webhook based on its ID. This action is irreversible.",
        "operationId": "hooks.delete",
        "tags": ["hooks"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "object": {
                      "type": "string",
                      "const": "hook"
                    },
                    "deleted": {
                      "type": "boolean",
                      "const": true
                    }
                  },
                  "required": ["id", "object", "deleted"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the webhook to delete. Provided as a path parameter."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/integrations/vercel/projects": {
      "get": {
        "summary": "Find Vercel Projects",
        "description": "Retrieves a list of Vercel projects linked to your integration. Useful for associating chats, deployments, or hooks with specific Vercel projects.",
        "operationId": "integrations.vercel.projects.find",
        "tags": ["integrations"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/VercelProjectSummary"
                      }
                    }
                  },
                  "required": ["object", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "summary": "Create Vercel Project",
        "description": "Links a Vercel project to an existing v0 project. Enables Vercel-related features and deployment integration within the v0 workspace.",
        "operationId": "integrations.vercel.projects.create",
        "tags": ["integrations"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "description": "The ID of the v0 project to link to the new Vercel project.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name to assign to the new Vercel project.",
                    "type": "string"
                  }
                },
                "required": ["projectId", "name"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelProjectDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/projects": {
      "get": {
        "summary": "Find Projects",
        "description": "Returns a list of all v0 projects in your workspace. Useful for browsing or managing projects across different chats or use cases.",
        "operationId": "projects.find",
        "tags": ["projects"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProjectSummary"
                      }
                    }
                  },
                  "required": ["object", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "summary": "Create Project",
        "description": "Creates a new v0 project with an optional description, icon, environment variables, and instructions. Projects help organize chats and manage context.",
        "operationId": "projects.create",
        "tags": ["projects"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the project.",
                    "type": "string",
                    "maxLength": 255
                  },
                  "description": {
                    "description": "A brief summary of the project’s purpose.",
                    "type": "string",
                    "maxLength": 1000
                  },
                  "icon": {
                    "description": "An icon identifier to visually represent the project.",
                    "default": "icon-wand-sparkles",
                    "type": "string"
                  },
                  "environmentVariables": {
                    "description": "A list of key-value pairs used to define runtime variables for the project.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "maxLength": 255
                        },
                        "value": {
                          "type": "string",
                          "maxLength": 1000
                        }
                      },
                      "required": ["key", "value"],
                      "additionalProperties": false
                    }
                  },
                  "instructions": {
                    "description": "Guidance or goals that provide context for the model when working within the project.",
                    "type": "string",
                    "maxLength": 1000
                  },
                  "vercelProjectId": {
                    "description": "The ID of an existing Vercel project to link to. If not provided, a new Vercel project will be created.",
                    "type": "string"
                  },
                  "privacy": {
                    "description": "The privacy setting for the project. For user accounts, this is always \"private\". For team/enterprise accounts, this can be either \"private\" or \"team\".",
                    "type": "string",
                    "enum": ["private", "team"]
                  }
                },
                "required": ["name"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/projects/{projectId}": {
      "get": {
        "summary": "Get Project by ID",
        "description": "Retrieves the details of a specific v0 project by its ID.",
        "operationId": "projects.getById",
        "tags": ["projects"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the project to retrieve."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "patch": {
        "summary": "Update Project",
        "description": "Updates the metadata of an existing project using its `projectId`. Supports changes to the project name and privacy setting.",
        "operationId": "projects.update",
        "tags": ["projects"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "A new name to assign to the project. Helps with identification and organization.",
                    "type": "string"
                  },
                  "description": {
                    "description": "A new description to assign to the project. Helps with identification and organization.",
                    "type": "string"
                  },
                  "instructions": {
                    "description": "Guidance or goals that provide context for the model when working within the project.",
                    "type": "string"
                  },
                  "privacy": {
                    "description": "The privacy setting for the project. For user accounts, this must be \"private\". For team/enterprise accounts, this can be either \"private\" or \"team\".",
                    "type": "string",
                    "enum": ["private", "team"]
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the project to update. Provided as a path parameter."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Project",
        "description": "Deletes a specific project based on the provided projectId. This operation marks the project as deleted and is irreversible.",
        "operationId": "projects.delete",
        "tags": ["projects"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The unique identifier of the deleted project.",
                      "type": "string"
                    },
                    "object": {
                      "description": "Fixed value identifying this object as a project.",
                      "type": "string",
                      "const": "project"
                    },
                    "deleted": {
                      "description": "Confirmation that the project has been deleted.",
                      "type": "boolean",
                      "const": true
                    }
                  },
                  "required": ["id", "object", "deleted"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the project to delete. This must be passed as a path parameter in the URL."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/projects/{projectId}/assign": {
      "post": {
        "summary": "Assign Project to Chat",
        "description": "Links an existing v0 project to a specific chat. Helps group conversations under a shared project context.",
        "operationId": "projects.assign",
        "tags": ["projects"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chatId": {
                    "description": "The ID of the chat to assign the project to.",
                    "type": "string"
                  }
                },
                "required": ["chatId"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "project"
                    },
                    "id": {
                      "type": "string"
                    },
                    "assigned": {
                      "type": "boolean",
                      "const": true
                    }
                  },
                  "required": ["object", "id", "assigned"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the project to assign."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/projects/{projectId}/env-vars": {
      "get": {
        "summary": "Find Environment Variables",
        "description": "Retrieves all environment variables for a given project.",
        "operationId": "projects.findEnvVars",
        "tags": ["projects"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EnvironmentVariableSummarySchema"
                      }
                    }
                  },
                  "required": ["object", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the project whose environment variables should be retrieved."
          },
          {
            "name": "decrypted",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Whether to return decrypted values. Defaults to false (encrypted).",
              "type": "string",
              "enum": ["true", "false"]
            },
            "description": "Whether to return decrypted values. Defaults to false (encrypted)."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "summary": "Create Environment Variables",
        "description": "Creates new environment variables for a given project. This endpoint will fail if any of the specified environment variable keys already exist, unless upsert is set to true.",
        "operationId": "projects.createEnvVars",
        "tags": ["projects"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "environmentVariables": {
                    "description": "An array of environment variables to create with key and value fields.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "The name of the environment variable.",
                          "type": "string",
                          "minLength": 1
                        },
                        "value": {
                          "description": "The value of the environment variable.",
                          "type": "string"
                        }
                      },
                      "required": ["key", "value"],
                      "additionalProperties": false
                    }
                  },
                  "upsert": {
                    "description": "Whether to overwrite existing environment variables with the same keys. Defaults to false.",
                    "type": "boolean"
                  }
                },
                "required": ["environmentVariables"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EnvironmentVariableSummarySchema"
                      }
                    }
                  },
                  "required": ["object", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the project where environment variables should be created."
          },
          {
            "name": "decrypted",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Whether to return decrypted values. Defaults to false (encrypted).",
              "type": "string",
              "enum": ["true", "false"]
            },
            "description": "Whether to return decrypted values. Defaults to false (encrypted)."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "patch": {
        "summary": "Update Environment Variables",
        "description": "Updates multiple environment variables for a given project. Only the value of each environment variable can be updated.",
        "operationId": "projects.updateEnvVars",
        "tags": ["projects"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "environmentVariables": {
                    "description": "An array of environment variables to update with id and value fields.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The unique identifier of the environment variable to update.",
                          "type": "string"
                        },
                        "value": {
                          "description": "The new value of the environment variable.",
                          "type": "string"
                        }
                      },
                      "required": ["id", "value"],
                      "additionalProperties": false
                    }
                  }
                },
                "required": ["environmentVariables"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EnvironmentVariableSummarySchema"
                      }
                    }
                  },
                  "required": ["object", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the project whose environment variables should be updated."
          },
          {
            "name": "decrypted",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Whether to return decrypted values. Defaults to false (encrypted).",
              "type": "string",
              "enum": ["true", "false"]
            },
            "description": "Whether to return decrypted values. Defaults to false (encrypted)."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/projects/{projectId}/env-vars/delete": {
      "post": {
        "summary": "Delete Environment Variables",
        "description": "Deletes multiple environment variables for a given project by their IDs.",
        "operationId": "projects.deleteEnvVars",
        "tags": ["projects"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "environmentVariableIds": {
                    "description": "An array of environment variable IDs to delete.",
                    "type": "array",
                    "items": {
                      "description": "The unique identifier of the environment variable to delete.",
                      "type": "string"
                    }
                  }
                },
                "required": ["environmentVariableIds"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "object": {
                            "type": "string",
                            "const": "environment_variable"
                          },
                          "deleted": {
                            "type": "boolean",
                            "const": true
                          }
                        },
                        "required": ["id", "object", "deleted"],
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": ["object", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the project whose environment variables should be deleted."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/projects/{projectId}/env-vars/{environmentVariableId}": {
      "get": {
        "summary": "Get Environment Variable",
        "description": "Retrieves a specific environment variable for a given project by its ID, including its value.",
        "operationId": "projects.getEnvVar",
        "tags": ["projects"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "environment_variable"
                    },
                    "data": {
                      "$ref": "#/components/schemas/EnvironmentVariableDetailSchema"
                    }
                  },
                  "required": ["object", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the project that owns the environment variable."
          },
          {
            "name": "environmentVariableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the environment variable to retrieve."
          },
          {
            "name": "decrypted",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Whether to return decrypted values. Defaults to false (encrypted).",
              "type": "string",
              "enum": ["true", "false"]
            },
            "description": "Whether to return decrypted values. Defaults to false (encrypted)."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/rate-limits": {
      "get": {
        "summary": "Find Rate Limit",
        "description": "Retrieves rate limit information for a given scope. Useful for monitoring usage limits and avoiding throttling.",
        "operationId": "rateLimits.find",
        "tags": ["rateLimits"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "remaining": {
                      "type": "number"
                    },
                    "reset": {
                      "type": "number"
                    },
                    "limit": {
                      "type": "number"
                    }
                  },
                  "required": ["limit"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "description": "The context or namespace to check rate limits for (e.g., a project slug or feature area).",
              "type": "string"
            },
            "description": "The context or namespace to check rate limits for (e.g., a project slug or feature area)."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/user": {
      "get": {
        "summary": "Get User",
        "description": "Retrieves information about the authenticated user, including their ID, name, email, and account metadata.",
        "operationId": "user.get",
        "tags": ["user"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/user/billing": {
      "get": {
        "summary": "Get Billing",
        "description": "Fetches billing usage and quota information for the authenticated user. Can be scoped to a specific context (e.g. project or namespace).",
        "operationId": "user.getBilling",
        "tags": ["user"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "billingType": {
                          "type": "string",
                          "const": "token"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "plan": {
                              "type": "string"
                            },
                            "billingMode": {
                              "type": "string",
                              "const": "test"
                            },
                            "role": {
                              "type": "string"
                            },
                            "billingCycle": {
                              "type": "object",
                              "properties": {
                                "start": {
                                  "type": "number"
                                },
                                "end": {
                                  "type": "number"
                                }
                              },
                              "required": ["start", "end"],
                              "additionalProperties": false
                            },
                            "balance": {
                              "type": "object",
                              "properties": {
                                "remaining": {
                                  "type": "number"
                                },
                                "total": {
                                  "type": "number"
                                }
                              },
                              "required": ["remaining", "total"],
                              "additionalProperties": false
                            },
                            "onDemand": {
                              "type": "object",
                              "properties": {
                                "balance": {
                                  "type": "number"
                                },
                                "blocks": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "expirationDate": {
                                        "type": "number"
                                      },
                                      "effectiveDate": {
                                        "type": "number"
                                      },
                                      "originalBalance": {
                                        "type": "number"
                                      },
                                      "currentBalance": {
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "effectiveDate",
                                      "originalBalance",
                                      "currentBalance"
                                    ],
                                    "additionalProperties": false
                                  }
                                }
                              },
                              "required": ["balance"],
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "plan",
                            "role",
                            "billingCycle",
                            "balance",
                            "onDemand"
                          ],
                          "additionalProperties": false
                        }
                      },
                      "required": ["billingType", "data"],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "billingType": {
                          "type": "string",
                          "const": "legacy"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "remaining": {
                              "type": "number"
                            },
                            "reset": {
                              "type": "number"
                            },
                            "limit": {
                              "type": "number"
                            }
                          },
                          "required": ["limit"],
                          "additionalProperties": false
                        }
                      },
                      "required": ["billingType", "data"],
                      "additionalProperties": false
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filters billing data by a specific scope, such as a project ID or slug.",
              "type": "string"
            },
            "description": "Filters billing data by a specific scope, such as a project ID or slug."
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/user/plan": {
      "get": {
        "summary": "Get Plan",
        "description": "Returns the current subscription plan for the authenticated user, including tier details and feature limits.",
        "operationId": "user.getPlan",
        "tags": ["user"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "plan"
                    },
                    "plan": {
                      "type": "string"
                    },
                    "billingCycle": {
                      "type": "object",
                      "properties": {
                        "start": {
                          "type": "number"
                        },
                        "end": {
                          "type": "number"
                        }
                      },
                      "required": ["start", "end"],
                      "additionalProperties": false
                    },
                    "balance": {
                      "type": "object",
                      "properties": {
                        "remaining": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        }
                      },
                      "required": ["remaining", "total"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["object", "plan", "billingCycle", "balance"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/user/scopes": {
      "get": {
        "summary": "Get User Scopes",
        "description": "Retrieves all accessible scopes for the authenticated user, such as personal workspaces or shared teams.",
        "operationId": "user.getScopes",
        "tags": ["user"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ScopeSummary"
                      }
                    }
                  },
                  "required": ["object", "data"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/reports/usage": {
      "get": {
        "summary": "Get Usage Report",
        "description": "Retrieves detailed usage events for the authenticated user or team, including costs, event types, models used, and metadata. Shows the same data as displayed in the usage dashboard. Can be filtered by chatId to show usage for a specific chat.",
        "operationId": "reports.getUsage",
        "tags": ["reports"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "const": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "object": {
                            "type": "string",
                            "const": "usage_event"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "image_generation",
                              "message",
                              "manual_debit",
                              "api_request",
                              "inline-edit"
                            ]
                          },
                          "promptCost": {
                            "type": "string"
                          },
                          "completionCost": {
                            "type": "string"
                          },
                          "totalCost": {
                            "type": "string"
                          },
                          "chatId": {
                            "type": "string"
                          },
                          "messageId": {
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          }
                        },
                        "required": ["id", "object", "totalCost"],
                        "additionalProperties": false
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "hasMore": {
                          "type": "boolean"
                        },
                        "nextCursor": {
                          "type": "string"
                        },
                        "nextUrl": {
                          "type": "string"
                        }
                      },
                      "required": ["hasMore"],
                      "additionalProperties": false
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "totalCount": {
                          "type": "number"
                        }
                      },
                      "required": ["totalCount"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["object", "data", "pagination", "meta"],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayloadTooLargeError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
            },
            "description": "Query parameter \"startDate\""
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
            },
            "description": "Query parameter \"endDate\""
          },
          {
            "name": "chatId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Query parameter \"chatId\""
          },
          {
            "name": "messageId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Query parameter \"messageId\""
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "default": 20,
              "type": "number",
              "minimum": 1,
              "maximum": 150
            },
            "description": "Query parameter \"limit\""
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Base64 encoded cursor containing pagination data",
              "type": "string"
            },
            "description": "Base64 encoded cursor containing pagination data"
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ChatDetail": {
        "description": "Detailed representation of a chat, including its messages, files, versions, and model configuration.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the chat.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a chat.",
            "type": "string",
            "const": "chat"
          },
          "shareable": {
            "description": "Indicates whether the chat can be shared via public link.",
            "type": "boolean"
          },
          "privacy": {
            "description": "Defines the visibility of the chat—private, team-only, or public.",
            "type": "string",
            "enum": ["public", "private", "team", "team-edit", "unlisted"]
          },
          "name": {
            "description": "An optional name assigned to the chat by the user.",
            "type": "string"
          },
          "title": {
            "description": "Deprecated title field preserved for backward compatibility.",
            "deprecated": true,
            "type": "string"
          },
          "createdAt": {
            "description": "The ISO timestamp representing when the chat was created.",
            "type": "string",
            "format": "date-time",
            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
          },
          "updatedAt": {
            "description": "The ISO timestamp of the last update to the chat.",
            "type": "string"
          },
          "favorite": {
            "description": "Indicates whether the chat is marked as a favorite.",
            "type": "boolean"
          },
          "authorId": {
            "description": "The ID of the user who created the chat.",
            "type": "string"
          },
          "projectId": {
            "description": "Optional ID of the v0 project associated with this chat.",
            "type": "string"
          },
          "webUrl": {
            "description": "Web URL to view this chat in the browser.",
            "type": "string"
          },
          "apiUrl": {
            "description": "API URL to access this chat via the API.",
            "type": "string"
          },
          "latestVersion": {
            "description": "Full details of the most recent generated version, if available.",
            "type": "object",
            "properties": {
              "id": {
                "description": "A unique identifier for the version.",
                "type": "string"
              },
              "object": {
                "description": "Fixed value identifying this object as a version.",
                "type": "string",
                "const": "version"
              },
              "status": {
                "description": "The current status of the version generation process.",
                "type": "string",
                "enum": ["pending", "completed", "failed"]
              },
              "demoUrl": {
                "description": "Optional URL for previewing the generated output.",
                "type": "string"
              },
              "screenshotUrl": {
                "description": "URL to retrieve a screenshot of this version.",
                "type": "string"
              },
              "createdAt": {
                "description": "The date and time when the version was created, in ISO 8601 format.",
                "type": "string",
                "format": "date-time",
                "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
              },
              "updatedAt": {
                "description": "The date and time when the version was last updated, in ISO 8601 format.",
                "type": "string",
                "format": "date-time",
                "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
              },
              "files": {
                "description": "A list of files that were generated or included in this version.",
                "type": "array",
                "items": {
                  "description": "Detailed representation of a file, including its content and lock status.",
                  "type": "object",
                  "properties": {
                    "object": {
                      "description": "Fixed value identifying this object as a file.",
                      "type": "string",
                      "const": "file"
                    },
                    "name": {
                      "description": "The name of the file, including its extension.",
                      "type": "string"
                    },
                    "content": {
                      "description": "The full contents of the file as a raw string.",
                      "type": "string"
                    },
                    "locked": {
                      "description": "Whether the file is locked to prevent AI from overwriting it during new version generation.",
                      "type": "boolean"
                    }
                  },
                  "required": ["object", "name", "content", "locked"],
                  "additionalProperties": false
                }
              }
            },
            "required": ["id", "object", "status", "createdAt", "files"],
            "additionalProperties": false
          },
          "url": {
            "description": "The canonical URL to access this chat.",
            "deprecated": true,
            "type": "string"
          },
          "messages": {
            "description": "All messages exchanged in the chat, including user and assistant entries.",
            "type": "array",
            "items": {
              "description": "Summary of a single message within a chat, including role, content, type, timestamp, and API URL.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "A unique identifier for the message.",
                  "type": "string"
                },
                "object": {
                  "description": "Fixed value identifying this object as a message.",
                  "type": "string",
                  "const": "message"
                },
                "content": {
                  "description": "The main text content of the message.",
                  "type": "string"
                },
                "experimental_content": {
                  "description": "The parsed content of the message as an array structure containing AST nodes. This is an experimental field that may change.",
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "description": "AST content section containing parsed markdown/MDX nodes",
                        "type": "array",
                        "prefixItems": [
                          {
                            "type": "number",
                            "const": 0
                          },
                          {
                            "type": "array",
                            "items": {}
                          }
                        ]
                      },
                      {
                        "description": "Metadata section containing title and other properties",
                        "type": "array",
                        "prefixItems": [
                          {
                            "type": "number",
                            "const": 1
                          },
                          {
                            "type": "object",
                            "properties": {
                              "~standard": {
                                "type": "string"
                              },
                              "def": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              },
                              "check": {
                                "type": "string"
                              },
                              "clone": {
                                "type": "string"
                              },
                              "brand": {
                                "type": "string"
                              },
                              "register": {
                                "type": "string"
                              },
                              "parse": {
                                "type": "string"
                              },
                              "safeParse": {
                                "type": "string"
                              },
                              "parseAsync": {
                                "type": "string"
                              },
                              "safeParseAsync": {
                                "type": "string"
                              },
                              "spa": {
                                "type": "string"
                              },
                              "encode": {
                                "type": "string"
                              },
                              "decode": {
                                "type": "string"
                              },
                              "encodeAsync": {
                                "type": "string"
                              },
                              "decodeAsync": {
                                "type": "string"
                              },
                              "safeEncode": {
                                "type": "string"
                              },
                              "safeDecode": {
                                "type": "string"
                              },
                              "safeEncodeAsync": {
                                "type": "string"
                              },
                              "safeDecodeAsync": {
                                "type": "string"
                              },
                              "refine": {
                                "type": "string"
                              },
                              "superRefine": {
                                "type": "string"
                              },
                              "overwrite": {
                                "type": "string"
                              },
                              "optional": {
                                "type": "string"
                              },
                              "nullable": {
                                "type": "string"
                              },
                              "nullish": {
                                "type": "string"
                              },
                              "nonoptional": {
                                "type": "string"
                              },
                              "array": {
                                "type": "string"
                              },
                              "or": {
                                "type": "string"
                              },
                              "and": {
                                "type": "string"
                              },
                              "transform": {
                                "type": "string"
                              },
                              "default": {
                                "type": "string"
                              },
                              "prefault": {
                                "type": "string"
                              },
                              "catch": {
                                "type": "string"
                              },
                              "pipe": {
                                "type": "string"
                              },
                              "readonly": {
                                "type": "string"
                              },
                              "describe": {
                                "type": "string"
                              },
                              "meta": {
                                "type": "string"
                              },
                              "isOptional": {
                                "type": "string"
                              },
                              "isNullable": {
                                "type": "string"
                              },
                              "keyof": {
                                "type": "string"
                              },
                              "catchall": {
                                "type": "string"
                              },
                              "passthrough": {
                                "type": "string"
                              },
                              "loose": {
                                "type": "string"
                              },
                              "strict": {
                                "type": "string"
                              },
                              "strip": {
                                "type": "string"
                              },
                              "extend": {
                                "type": "string"
                              },
                              "safeExtend": {
                                "type": "string"
                              },
                              "merge": {
                                "type": "string"
                              },
                              "pick": {
                                "type": "string"
                              },
                              "omit": {
                                "type": "string"
                              },
                              "partial": {
                                "type": "string"
                              },
                              "required": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "~standard",
                              "def",
                              "type",
                              "check",
                              "clone",
                              "brand",
                              "register",
                              "parse",
                              "safeParse",
                              "parseAsync",
                              "safeParseAsync",
                              "spa",
                              "encode",
                              "decode",
                              "encodeAsync",
                              "decodeAsync",
                              "safeEncode",
                              "safeDecode",
                              "safeEncodeAsync",
                              "safeDecodeAsync",
                              "refine",
                              "superRefine",
                              "overwrite",
                              "optional",
                              "nullable",
                              "nullish",
                              "nonoptional",
                              "array",
                              "or",
                              "and",
                              "transform",
                              "default",
                              "prefault",
                              "catch",
                              "pipe",
                              "readonly",
                              "describe",
                              "meta",
                              "isOptional",
                              "isNullable",
                              "keyof",
                              "catchall",
                              "passthrough",
                              "loose",
                              "strict",
                              "strip",
                              "extend",
                              "safeExtend",
                              "merge",
                              "pick",
                              "omit",
                              "partial",
                              "required"
                            ],
                            "additionalProperties": false
                          }
                        ]
                      }
                    ]
                  }
                },
                "createdAt": {
                  "description": "The ISO timestamp representing when the message was created.",
                  "type": "string"
                },
                "updatedAt": {
                  "description": "The ISO timestamp representing when the message was last updated.",
                  "type": "string",
                  "format": "date-time",
                  "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                },
                "type": {
                  "description": "Indicates the format or category of the message, such as plain text or code.",
                  "type": "string",
                  "enum": [
                    "message",
                    "forked-block",
                    "forked-chat",
                    "open-in-v0",
                    "refinement",
                    "added-environment-variables",
                    "added-integration",
                    "deleted-file",
                    "moved-file",
                    "renamed-file",
                    "edited-file",
                    "replace-src",
                    "reverted-block",
                    "fix-with-v0",
                    "auto-fix-with-v0",
                    "sync-git"
                  ]
                },
                "role": {
                  "description": "Specifies whether the message was sent by the user or the assistant.",
                  "type": "string",
                  "enum": ["user", "assistant"]
                },
                "finishReason": {
                  "description": "The reason why the message generation finished.",
                  "type": "string",
                  "enum": [
                    "stop",
                    "length",
                    "content-filter",
                    "tool-calls",
                    "error",
                    "other",
                    "unknown"
                  ]
                },
                "apiUrl": {
                  "description": "API URL to access this message via the API.",
                  "type": "string"
                },
                "authorId": {
                  "description": "The ID of the user who sent the message.",
                  "type": ["string", "null"]
                },
                "parentId": {
                  "description": "The ID of the parent message.",
                  "type": ["string", "null"]
                },
                "attachments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "description": "The URL where the attachment file can be accessed.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The original filename of the attachment.",
                        "type": "string"
                      },
                      "contentType": {
                        "description": "The MIME type of the attachment file (e.g., image/png, application/pdf).",
                        "type": "string"
                      },
                      "size": {
                        "description": "The size of the attachment file in bytes.",
                        "type": "number"
                      },
                      "content": {
                        "description": "The base64-encoded content of the attachment file, if available.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Optional v0-specific attachment type for enhanced processing.",
                        "type": "string",
                        "enum": ["screenshot", "figma", "zip"]
                      }
                    },
                    "required": ["url", "size"],
                    "additionalProperties": false
                  }
                }
              },
              "required": [
                "id",
                "object",
                "content",
                "createdAt",
                "type",
                "role",
                "apiUrl",
                "authorId"
              ],
              "additionalProperties": false
            }
          },
          "files": {
            "description": "Optional array of files associated with the chat context.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "lang": {
                  "description": "Programming language used in the file (e.g., JavaScript, Python).",
                  "type": "string"
                },
                "meta": {
                  "description": "A key-value map of metadata associated with the file (e.g., path, type).",
                  "type": "object",
                  "propertyNames": {
                    "type": "string"
                  },
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "source": {
                  "description": "The origin or identifier of the file source (e.g., path or upload label).",
                  "type": "string"
                }
              },
              "required": ["lang", "meta", "source"],
              "additionalProperties": false
            }
          },
          "demo": {
            "description": "Deprecated demo URL used for previewing the chat result.",
            "deprecated": true,
            "type": "string"
          },
          "text": {
            "description": "The main user prompt or instruction that started the chat.",
            "type": "string"
          },
          "modelConfiguration": {
            "description": "The configuration used to generate responses in this chat.",
            "type": "object",
            "properties": {
              "modelId": {
                "default": "v0-1.5-md",
                "description": "Deprecated Model ID field preserved for backward compatibility.",
                "deprecated": true,
                "type": "string",
                "enum": ["v0-1.5-sm", "v0-1.5-md", "v0-1.5-lg", "v0-gpt-5"]
              },
              "imageGenerations": {
                "default": false,
                "description": "Enables image generations to generate up to 5 images per version.",
                "type": "boolean"
              },
              "thinking": {
                "default": false,
                "description": "Enables thinking to generate a response in multiple steps.",
                "type": "boolean"
              }
            },
            "additionalProperties": false
          },
          "permissions": {
            "type": "object",
            "properties": {
              "write": {
                "description": "If true, the user has write access to the chat.",
                "type": "boolean"
              }
            },
            "required": ["write"],
            "additionalProperties": false
          }
        },
        "required": [
          "id",
          "object",
          "shareable",
          "privacy",
          "createdAt",
          "favorite",
          "authorId",
          "webUrl",
          "apiUrl",
          "url",
          "messages",
          "text",
          "permissions"
        ],
        "additionalProperties": false
      },
      "ChatSummary": {
        "description": "Summary of a chat, including metadata like privacy, author, latest version, and URLs.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the chat.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a chat.",
            "type": "string",
            "const": "chat"
          },
          "shareable": {
            "description": "Indicates whether the chat can be shared via public link.",
            "type": "boolean"
          },
          "privacy": {
            "description": "Defines the visibility of the chat—private, team-only, or public.",
            "type": "string",
            "enum": ["public", "private", "team", "team-edit", "unlisted"]
          },
          "name": {
            "description": "An optional name assigned to the chat by the user.",
            "type": "string"
          },
          "title": {
            "description": "Deprecated title field preserved for backward compatibility.",
            "deprecated": true,
            "type": "string"
          },
          "createdAt": {
            "description": "The ISO timestamp representing when the chat was created.",
            "type": "string",
            "format": "date-time",
            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
          },
          "updatedAt": {
            "description": "The ISO timestamp of the last update to the chat.",
            "type": "string"
          },
          "favorite": {
            "description": "Indicates whether the chat is marked as a favorite.",
            "type": "boolean"
          },
          "authorId": {
            "description": "The ID of the user who created the chat.",
            "type": "string"
          },
          "projectId": {
            "description": "Optional ID of the v0 project associated with this chat.",
            "type": "string"
          },
          "webUrl": {
            "description": "Web URL to view this chat in the browser.",
            "type": "string"
          },
          "apiUrl": {
            "description": "API URL to access this chat via the API.",
            "type": "string"
          },
          "latestVersion": {
            "description": "The most recent generated version of the chat, if available.",
            "type": "object",
            "properties": {
              "id": {
                "description": "A unique identifier for the version.",
                "type": "string"
              },
              "object": {
                "description": "Fixed value identifying this object as a version.",
                "type": "string",
                "const": "version"
              },
              "status": {
                "description": "The current status of the version generation process.",
                "type": "string",
                "enum": ["pending", "completed", "failed"]
              },
              "demoUrl": {
                "description": "Optional URL for previewing the generated output.",
                "type": "string"
              },
              "screenshotUrl": {
                "description": "URL to retrieve a screenshot of this version.",
                "type": "string"
              },
              "createdAt": {
                "description": "The date and time when the version was created, in ISO 8601 format.",
                "type": "string",
                "format": "date-time",
                "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
              },
              "updatedAt": {
                "description": "The date and time when the version was last updated, in ISO 8601 format.",
                "type": "string",
                "format": "date-time",
                "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
              }
            },
            "required": ["id", "object", "status", "createdAt"],
            "additionalProperties": false
          }
        },
        "required": [
          "id",
          "object",
          "shareable",
          "privacy",
          "createdAt",
          "favorite",
          "authorId",
          "webUrl",
          "apiUrl"
        ],
        "additionalProperties": false
      },
      "DeploymentDetail": {
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the deployment.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a deployment.",
            "type": "string",
            "const": "deployment"
          },
          "inspectorUrl": {
            "description": "URL to the deployment inspector.",
            "type": "string"
          },
          "chatId": {
            "description": "The ID of the chat that this deployment is scoped to.",
            "type": "string"
          },
          "projectId": {
            "description": "The ID of the project that this deployment is scoped to.",
            "type": "string"
          },
          "versionId": {
            "description": "The ID of the version that this deployment is scoped to.",
            "type": "string"
          },
          "apiUrl": {
            "description": "The API endpoint URL for accessing this deployment programmatically.",
            "type": "string",
            "format": "uri"
          },
          "webUrl": {
            "description": "The web URL where the deployment can be viewed or managed.",
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "id",
          "object",
          "inspectorUrl",
          "chatId",
          "projectId",
          "versionId",
          "apiUrl",
          "webUrl"
        ],
        "additionalProperties": false
      },
      "DeploymentSummary": {
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the deployment.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a deployment.",
            "type": "string",
            "const": "deployment"
          },
          "inspectorUrl": {
            "description": "URL to the deployment inspector.",
            "type": "string"
          },
          "chatId": {
            "description": "The ID of the chat that this deployment is scoped to.",
            "type": "string"
          },
          "projectId": {
            "description": "The ID of the project that this deployment is scoped to.",
            "type": "string"
          },
          "versionId": {
            "description": "The ID of the version that this deployment is scoped to.",
            "type": "string"
          },
          "apiUrl": {
            "description": "The API endpoint URL for accessing this deployment programmatically.",
            "type": "string",
            "format": "uri"
          },
          "webUrl": {
            "description": "The web URL where the deployment can be viewed or managed.",
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "id",
          "object",
          "inspectorUrl",
          "chatId",
          "projectId",
          "versionId",
          "apiUrl",
          "webUrl"
        ],
        "additionalProperties": false
      },
      "EnvironmentVariableDetailSchema": {
        "description": "Detailed information for an environment variable including its value.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the environment variable.",
            "type": "string"
          },
          "object": {
            "description": "The object type.",
            "type": "string",
            "const": "environment_variable"
          },
          "key": {
            "description": "The name of the environment variable.",
            "type": "string"
          },
          "value": {
            "description": "The value of the environment variable.",
            "type": "string"
          },
          "decrypted": {
            "description": "Whether the value is decrypted or encrypted.",
            "type": "boolean"
          },
          "createdAt": {
            "description": "The timestamp when the environment variable was created.",
            "type": "number"
          },
          "updatedAt": {
            "description": "The timestamp when the environment variable was last updated.",
            "type": "number"
          }
        },
        "required": ["id", "object", "key", "value", "decrypted", "createdAt"],
        "additionalProperties": false
      },
      "EnvironmentVariableSummarySchema": {
        "description": "Summary information for an environment variable.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the environment variable.",
            "type": "string"
          },
          "object": {
            "description": "The object type.",
            "type": "string",
            "const": "environment_variable"
          },
          "key": {
            "description": "The name of the environment variable.",
            "type": "string"
          },
          "value": {
            "description": "The value of the environment variable.",
            "type": "string"
          },
          "decrypted": {
            "description": "Whether the value is decrypted or encrypted.",
            "type": "boolean"
          },
          "createdAt": {
            "description": "The timestamp when the environment variable was created.",
            "type": "number"
          },
          "updatedAt": {
            "description": "The timestamp when the environment variable was last updated.",
            "type": "number"
          }
        },
        "required": ["id", "object", "key", "value", "decrypted", "createdAt"],
        "additionalProperties": false
      },
      "EnvironmentVariablesListSchema": {
        "description": "List response containing environment variables.",
        "type": "object",
        "properties": {
          "object": {
            "description": "Fixed value identifying this as a list response.",
            "type": "string",
            "const": "list"
          },
          "data": {
            "description": "Array of environment variable details.",
            "type": "array",
            "items": {
              "description": "Detailed information for an environment variable including its value.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "A unique identifier for the environment variable.",
                  "type": "string"
                },
                "object": {
                  "description": "The object type.",
                  "type": "string",
                  "const": "environment_variable"
                },
                "key": {
                  "description": "The name of the environment variable.",
                  "type": "string"
                },
                "value": {
                  "description": "The value of the environment variable.",
                  "type": "string"
                },
                "decrypted": {
                  "description": "Whether the value is decrypted or encrypted.",
                  "type": "boolean"
                },
                "createdAt": {
                  "description": "The timestamp when the environment variable was created.",
                  "type": "number"
                },
                "updatedAt": {
                  "description": "The timestamp when the environment variable was last updated.",
                  "type": "number"
                }
              },
              "required": [
                "id",
                "object",
                "key",
                "value",
                "decrypted",
                "createdAt"
              ],
              "additionalProperties": false
            }
          }
        },
        "required": ["object", "data"],
        "additionalProperties": false
      },
      "FileDetail": {
        "description": "Detailed representation of a file, including its content and lock status.",
        "type": "object",
        "properties": {
          "object": {
            "description": "Fixed value identifying this object as a file.",
            "type": "string",
            "const": "file"
          },
          "name": {
            "description": "The name of the file, including its extension.",
            "type": "string"
          },
          "content": {
            "description": "The full contents of the file as a raw string.",
            "type": "string"
          },
          "locked": {
            "description": "Whether the file is locked to prevent AI from overwriting it during new version generation.",
            "type": "boolean"
          }
        },
        "required": ["object", "name", "content", "locked"],
        "additionalProperties": false
      },
      "FileSummary": {
        "description": "Basic metadata about a file, such as its type and name.",
        "type": "object",
        "properties": {
          "object": {
            "description": "Fixed value identifying this object as a file.",
            "type": "string",
            "const": "file"
          },
          "name": {
            "description": "The name of the file, including its extension.",
            "type": "string"
          }
        },
        "required": ["object", "name"],
        "additionalProperties": false
      },
      "HookDetail": {
        "description": "Full configuration details for a webhook, including its scope and subscription.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the webhook.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a webhook.",
            "type": "string",
            "const": "hook"
          },
          "name": {
            "description": "A user-defined name to label the webhook.",
            "type": "string"
          },
          "events": {
            "description": "List of event types this webhook is subscribed to.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "chat.created",
                "chat.updated",
                "chat.deleted",
                "message.created",
                "message.updated",
                "message.deleted",
                "message.finished"
              ]
            }
          },
          "chatId": {
            "description": "Optional ID of the chat that this webhook is scoped to.",
            "type": "string"
          },
          "url": {
            "description": "Target URL that receives event payloads for this webhook.",
            "type": "string"
          }
        },
        "required": ["id", "object", "name", "events", "url"],
        "additionalProperties": false
      },
      "HookEventDetail": {
        "description": "Detailed record of a webhook event, including its type, status, and timestamp.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the webhook event log entry.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a webhook event.",
            "type": "string",
            "const": "hook_event"
          },
          "event": {
            "description": "The type of event that triggered the webhook.",
            "type": "string",
            "enum": [
              "chat.created",
              "chat.updated",
              "chat.deleted",
              "message.created",
              "message.updated",
              "message.deleted",
              "message.finished"
            ]
          },
          "status": {
            "description": "The delivery status of the webhook (e.g., delivered, failed).",
            "default": "pending",
            "type": "string",
            "enum": ["pending", "success", "error"]
          },
          "createdAt": {
            "description": "Timestamp of when the webhook event was triggered.",
            "type": "string",
            "format": "date-time",
            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
          }
        },
        "required": ["id", "object", "event", "createdAt"],
        "additionalProperties": false
      },
      "HookSummary": {
        "description": "Summary of a webhook, including its ID and display name.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the webhook.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a webhook.",
            "type": "string",
            "const": "hook"
          },
          "name": {
            "description": "A user-defined name to label the webhook.",
            "type": "string"
          }
        },
        "required": ["id", "object", "name"],
        "additionalProperties": false
      },
      "IntegrationConnectionDetailSchema": {
        "description": "Detailed information about an integration connection to a project.",
        "type": "object",
        "properties": {
          "object": {
            "description": "The object type.",
            "type": "string",
            "const": "integration_connection"
          },
          "id": {
            "description": "The unique ID of the integration connection (format: {projectId}_{integrationId}).",
            "type": "string"
          },
          "connected": {
            "description": "Whether the integration is connected to the project.",
            "type": "boolean"
          },
          "integration": {
            "description": "Information about the connected integration.",
            "type": "object",
            "properties": {
              "id": {
                "description": "The ID of the integration.",
                "type": "string"
              },
              "object": {
                "description": "The object type.",
                "type": "string",
                "const": "integration"
              },
              "slug": {
                "description": "The slug of the integration.",
                "type": "string"
              },
              "name": {
                "description": "The name of the integration.",
                "type": "string"
              }
            },
            "required": ["id", "object", "slug", "name"],
            "additionalProperties": false
          },
          "metadata": {
            "description": "Additional metadata about the integration connection.",
            "type": "object",
            "propertyNames": {
              "type": "string"
            },
            "additionalProperties": {}
          }
        },
        "required": ["object", "id", "connected", "integration"],
        "additionalProperties": false
      },
      "IntegrationConnectionListSchema": {
        "description": "List response containing integration connections.",
        "type": "object",
        "properties": {
          "object": {
            "description": "Fixed value identifying this as a list response.",
            "type": "string",
            "const": "list"
          },
          "data": {
            "description": "Array of integration connection summaries.",
            "type": "array",
            "items": {
              "description": "Summary information about an integration connection to a project.",
              "type": "object",
              "properties": {
                "object": {
                  "description": "The object type.",
                  "type": "string",
                  "const": "integration_connection"
                },
                "id": {
                  "description": "The unique ID of the integration connection (format: {projectId}_{integrationId}).",
                  "type": "string"
                },
                "connected": {
                  "description": "Whether the integration is connected to the project.",
                  "type": "boolean"
                },
                "integration": {
                  "description": "Information about the connected integration.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the integration.",
                      "type": "string"
                    },
                    "object": {
                      "description": "The object type.",
                      "type": "string",
                      "const": "integration"
                    },
                    "slug": {
                      "description": "The slug of the integration.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the integration.",
                      "type": "string"
                    }
                  },
                  "required": ["id", "object", "slug", "name"],
                  "additionalProperties": false
                }
              },
              "required": ["object", "id", "connected", "integration"],
              "additionalProperties": false
            }
          }
        },
        "required": ["object", "data"],
        "additionalProperties": false
      },
      "IntegrationConnectionSummarySchema": {
        "description": "Summary information about an integration connection to a project.",
        "type": "object",
        "properties": {
          "object": {
            "description": "The object type.",
            "type": "string",
            "const": "integration_connection"
          },
          "id": {
            "description": "The unique ID of the integration connection (format: {projectId}_{integrationId}).",
            "type": "string"
          },
          "connected": {
            "description": "Whether the integration is connected to the project.",
            "type": "boolean"
          },
          "integration": {
            "description": "Information about the connected integration.",
            "type": "object",
            "properties": {
              "id": {
                "description": "The ID of the integration.",
                "type": "string"
              },
              "object": {
                "description": "The object type.",
                "type": "string",
                "const": "integration"
              },
              "slug": {
                "description": "The slug of the integration.",
                "type": "string"
              },
              "name": {
                "description": "The name of the integration.",
                "type": "string"
              }
            },
            "required": ["id", "object", "slug", "name"],
            "additionalProperties": false
          }
        },
        "required": ["object", "id", "connected", "integration"],
        "additionalProperties": false
      },
      "IntegrationDetailSchema": {
        "description": "Detailed information about an integration.",
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the integration.",
            "type": "string"
          },
          "object": {
            "description": "The object type.",
            "type": "string",
            "const": "integration"
          },
          "slug": {
            "description": "The slug of the integration.",
            "type": "string"
          },
          "name": {
            "description": "The name of the integration.",
            "type": "string"
          },
          "description": {
            "description": "A short description of the integration.",
            "type": "string"
          },
          "iconUrl": {
            "description": "URL to the integration icon.",
            "type": "string"
          }
        },
        "required": ["id", "object", "slug", "name", "description", "iconUrl"],
        "additionalProperties": false
      },
      "IntegrationListSchema": {
        "description": "List of available integrations.",
        "type": "object",
        "properties": {
          "object": {
            "description": "Fixed value identifying this as a list response.",
            "type": "string",
            "const": "list"
          },
          "data": {
            "description": "Array of integration details.",
            "type": "array",
            "items": {
              "description": "Detailed information about an integration.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The ID of the integration.",
                  "type": "string"
                },
                "object": {
                  "description": "The object type.",
                  "type": "string",
                  "const": "integration"
                },
                "slug": {
                  "description": "The slug of the integration.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the integration.",
                  "type": "string"
                },
                "description": {
                  "description": "A short description of the integration.",
                  "type": "string"
                },
                "iconUrl": {
                  "description": "URL to the integration icon.",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "object",
                "slug",
                "name",
                "description",
                "iconUrl"
              ],
              "additionalProperties": false
            }
          }
        },
        "required": ["object", "data"],
        "additionalProperties": false
      },
      "IntegrationSummarySchema": {
        "description": "Basic information about an integration.",
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the integration.",
            "type": "string"
          },
          "object": {
            "description": "The object type.",
            "type": "string",
            "const": "integration"
          },
          "slug": {
            "description": "The slug of the integration.",
            "type": "string"
          },
          "name": {
            "description": "The name of the integration.",
            "type": "string"
          }
        },
        "required": ["id", "object", "slug", "name"],
        "additionalProperties": false
      },
      "MessageDetail": {
        "description": "Detailed message object extending MessageSummary with chat metadata.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the message.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a message.",
            "type": "string",
            "const": "message"
          },
          "content": {
            "description": "The main text content of the message.",
            "type": "string"
          },
          "experimental_content": {
            "description": "The parsed content of the message as an array structure containing AST nodes. This is an experimental field that may change.",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "description": "AST content section containing parsed markdown/MDX nodes",
                  "type": "array",
                  "prefixItems": [
                    {
                      "type": "number",
                      "const": 0
                    },
                    {
                      "type": "array",
                      "items": {}
                    }
                  ]
                },
                {
                  "description": "Metadata section containing title and other properties",
                  "type": "array",
                  "prefixItems": [
                    {
                      "type": "number",
                      "const": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "~standard": {
                          "type": "string"
                        },
                        "def": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "check": {
                          "type": "string"
                        },
                        "clone": {
                          "type": "string"
                        },
                        "brand": {
                          "type": "string"
                        },
                        "register": {
                          "type": "string"
                        },
                        "parse": {
                          "type": "string"
                        },
                        "safeParse": {
                          "type": "string"
                        },
                        "parseAsync": {
                          "type": "string"
                        },
                        "safeParseAsync": {
                          "type": "string"
                        },
                        "spa": {
                          "type": "string"
                        },
                        "encode": {
                          "type": "string"
                        },
                        "decode": {
                          "type": "string"
                        },
                        "encodeAsync": {
                          "type": "string"
                        },
                        "decodeAsync": {
                          "type": "string"
                        },
                        "safeEncode": {
                          "type": "string"
                        },
                        "safeDecode": {
                          "type": "string"
                        },
                        "safeEncodeAsync": {
                          "type": "string"
                        },
                        "safeDecodeAsync": {
                          "type": "string"
                        },
                        "refine": {
                          "type": "string"
                        },
                        "superRefine": {
                          "type": "string"
                        },
                        "overwrite": {
                          "type": "string"
                        },
                        "optional": {
                          "type": "string"
                        },
                        "nullable": {
                          "type": "string"
                        },
                        "nullish": {
                          "type": "string"
                        },
                        "nonoptional": {
                          "type": "string"
                        },
                        "array": {
                          "type": "string"
                        },
                        "or": {
                          "type": "string"
                        },
                        "and": {
                          "type": "string"
                        },
                        "transform": {
                          "type": "string"
                        },
                        "default": {
                          "type": "string"
                        },
                        "prefault": {
                          "type": "string"
                        },
                        "catch": {
                          "type": "string"
                        },
                        "pipe": {
                          "type": "string"
                        },
                        "readonly": {
                          "type": "string"
                        },
                        "describe": {
                          "type": "string"
                        },
                        "meta": {
                          "type": "string"
                        },
                        "isOptional": {
                          "type": "string"
                        },
                        "isNullable": {
                          "type": "string"
                        },
                        "keyof": {
                          "type": "string"
                        },
                        "catchall": {
                          "type": "string"
                        },
                        "passthrough": {
                          "type": "string"
                        },
                        "loose": {
                          "type": "string"
                        },
                        "strict": {
                          "type": "string"
                        },
                        "strip": {
                          "type": "string"
                        },
                        "extend": {
                          "type": "string"
                        },
                        "safeExtend": {
                          "type": "string"
                        },
                        "merge": {
                          "type": "string"
                        },
                        "pick": {
                          "type": "string"
                        },
                        "omit": {
                          "type": "string"
                        },
                        "partial": {
                          "type": "string"
                        },
                        "required": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "~standard",
                        "def",
                        "type",
                        "check",
                        "clone",
                        "brand",
                        "register",
                        "parse",
                        "safeParse",
                        "parseAsync",
                        "safeParseAsync",
                        "spa",
                        "encode",
                        "decode",
                        "encodeAsync",
                        "decodeAsync",
                        "safeEncode",
                        "safeDecode",
                        "safeEncodeAsync",
                        "safeDecodeAsync",
                        "refine",
                        "superRefine",
                        "overwrite",
                        "optional",
                        "nullable",
                        "nullish",
                        "nonoptional",
                        "array",
                        "or",
                        "and",
                        "transform",
                        "default",
                        "prefault",
                        "catch",
                        "pipe",
                        "readonly",
                        "describe",
                        "meta",
                        "isOptional",
                        "isNullable",
                        "keyof",
                        "catchall",
                        "passthrough",
                        "loose",
                        "strict",
                        "strip",
                        "extend",
                        "safeExtend",
                        "merge",
                        "pick",
                        "omit",
                        "partial",
                        "required"
                      ],
                      "additionalProperties": false
                    }
                  ]
                }
              ]
            }
          },
          "createdAt": {
            "description": "The ISO timestamp representing when the message was created.",
            "type": "string"
          },
          "updatedAt": {
            "description": "The ISO timestamp representing when the message was last updated.",
            "type": "string",
            "format": "date-time",
            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
          },
          "type": {
            "description": "Indicates the format or category of the message, such as plain text or code.",
            "type": "string",
            "enum": [
              "message",
              "forked-block",
              "forked-chat",
              "open-in-v0",
              "refinement",
              "added-environment-variables",
              "added-integration",
              "deleted-file",
              "moved-file",
              "renamed-file",
              "edited-file",
              "replace-src",
              "reverted-block",
              "fix-with-v0",
              "auto-fix-with-v0",
              "sync-git"
            ]
          },
          "role": {
            "description": "Specifies whether the message was sent by the user or the assistant.",
            "type": "string",
            "enum": ["user", "assistant"]
          },
          "finishReason": {
            "description": "The reason why the message generation finished.",
            "type": "string",
            "enum": [
              "stop",
              "length",
              "content-filter",
              "tool-calls",
              "error",
              "other",
              "unknown"
            ]
          },
          "apiUrl": {
            "description": "API URL to access this message via the API.",
            "type": "string"
          },
          "authorId": {
            "description": "The ID of the user who sent the message.",
            "type": ["string", "null"]
          },
          "parentId": {
            "description": "The ID of the parent message.",
            "type": ["string", "null"]
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "description": "The URL where the attachment file can be accessed.",
                  "type": "string"
                },
                "name": {
                  "description": "The original filename of the attachment.",
                  "type": "string"
                },
                "contentType": {
                  "description": "The MIME type of the attachment file (e.g., image/png, application/pdf).",
                  "type": "string"
                },
                "size": {
                  "description": "The size of the attachment file in bytes.",
                  "type": "number"
                },
                "content": {
                  "description": "The base64-encoded content of the attachment file, if available.",
                  "type": "string"
                },
                "type": {
                  "description": "Optional v0-specific attachment type for enhanced processing.",
                  "type": "string",
                  "enum": ["screenshot", "figma", "zip"]
                }
              },
              "required": ["url", "size"],
              "additionalProperties": false
            }
          },
          "chatId": {
            "description": "The ID of the chat to which this message belongs.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "object",
          "content",
          "createdAt",
          "type",
          "role",
          "apiUrl",
          "authorId",
          "chatId"
        ],
        "additionalProperties": false
      },
      "MessageSummary": {
        "description": "Summary of a single message within a chat, including role, content, type, timestamp, and API URL.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the message.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a message.",
            "type": "string",
            "const": "message"
          },
          "content": {
            "description": "The main text content of the message.",
            "type": "string"
          },
          "experimental_content": {
            "description": "The parsed content of the message as an array structure containing AST nodes. This is an experimental field that may change.",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "description": "AST content section containing parsed markdown/MDX nodes",
                  "type": "array",
                  "prefixItems": [
                    {
                      "type": "number",
                      "const": 0
                    },
                    {
                      "type": "array",
                      "items": {}
                    }
                  ]
                },
                {
                  "description": "Metadata section containing title and other properties",
                  "type": "array",
                  "prefixItems": [
                    {
                      "type": "number",
                      "const": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "~standard": {
                          "type": "string"
                        },
                        "def": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "check": {
                          "type": "string"
                        },
                        "clone": {
                          "type": "string"
                        },
                        "brand": {
                          "type": "string"
                        },
                        "register": {
                          "type": "string"
                        },
                        "parse": {
                          "type": "string"
                        },
                        "safeParse": {
                          "type": "string"
                        },
                        "parseAsync": {
                          "type": "string"
                        },
                        "safeParseAsync": {
                          "type": "string"
                        },
                        "spa": {
                          "type": "string"
                        },
                        "encode": {
                          "type": "string"
                        },
                        "decode": {
                          "type": "string"
                        },
                        "encodeAsync": {
                          "type": "string"
                        },
                        "decodeAsync": {
                          "type": "string"
                        },
                        "safeEncode": {
                          "type": "string"
                        },
                        "safeDecode": {
                          "type": "string"
                        },
                        "safeEncodeAsync": {
                          "type": "string"
                        },
                        "safeDecodeAsync": {
                          "type": "string"
                        },
                        "refine": {
                          "type": "string"
                        },
                        "superRefine": {
                          "type": "string"
                        },
                        "overwrite": {
                          "type": "string"
                        },
                        "optional": {
                          "type": "string"
                        },
                        "nullable": {
                          "type": "string"
                        },
                        "nullish": {
                          "type": "string"
                        },
                        "nonoptional": {
                          "type": "string"
                        },
                        "array": {
                          "type": "string"
                        },
                        "or": {
                          "type": "string"
                        },
                        "and": {
                          "type": "string"
                        },
                        "transform": {
                          "type": "string"
                        },
                        "default": {
                          "type": "string"
                        },
                        "prefault": {
                          "type": "string"
                        },
                        "catch": {
                          "type": "string"
                        },
                        "pipe": {
                          "type": "string"
                        },
                        "readonly": {
                          "type": "string"
                        },
                        "describe": {
                          "type": "string"
                        },
                        "meta": {
                          "type": "string"
                        },
                        "isOptional": {
                          "type": "string"
                        },
                        "isNullable": {
                          "type": "string"
                        },
                        "keyof": {
                          "type": "string"
                        },
                        "catchall": {
                          "type": "string"
                        },
                        "passthrough": {
                          "type": "string"
                        },
                        "loose": {
                          "type": "string"
                        },
                        "strict": {
                          "type": "string"
                        },
                        "strip": {
                          "type": "string"
                        },
                        "extend": {
                          "type": "string"
                        },
                        "safeExtend": {
                          "type": "string"
                        },
                        "merge": {
                          "type": "string"
                        },
                        "pick": {
                          "type": "string"
                        },
                        "omit": {
                          "type": "string"
                        },
                        "partial": {
                          "type": "string"
                        },
                        "required": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "~standard",
                        "def",
                        "type",
                        "check",
                        "clone",
                        "brand",
                        "register",
                        "parse",
                        "safeParse",
                        "parseAsync",
                        "safeParseAsync",
                        "spa",
                        "encode",
                        "decode",
                        "encodeAsync",
                        "decodeAsync",
                        "safeEncode",
                        "safeDecode",
                        "safeEncodeAsync",
                        "safeDecodeAsync",
                        "refine",
                        "superRefine",
                        "overwrite",
                        "optional",
                        "nullable",
                        "nullish",
                        "nonoptional",
                        "array",
                        "or",
                        "and",
                        "transform",
                        "default",
                        "prefault",
                        "catch",
                        "pipe",
                        "readonly",
                        "describe",
                        "meta",
                        "isOptional",
                        "isNullable",
                        "keyof",
                        "catchall",
                        "passthrough",
                        "loose",
                        "strict",
                        "strip",
                        "extend",
                        "safeExtend",
                        "merge",
                        "pick",
                        "omit",
                        "partial",
                        "required"
                      ],
                      "additionalProperties": false
                    }
                  ]
                }
              ]
            }
          },
          "createdAt": {
            "description": "The ISO timestamp representing when the message was created.",
            "type": "string"
          },
          "updatedAt": {
            "description": "The ISO timestamp representing when the message was last updated.",
            "type": "string",
            "format": "date-time",
            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
          },
          "type": {
            "description": "Indicates the format or category of the message, such as plain text or code.",
            "type": "string",
            "enum": [
              "message",
              "forked-block",
              "forked-chat",
              "open-in-v0",
              "refinement",
              "added-environment-variables",
              "added-integration",
              "deleted-file",
              "moved-file",
              "renamed-file",
              "edited-file",
              "replace-src",
              "reverted-block",
              "fix-with-v0",
              "auto-fix-with-v0",
              "sync-git"
            ]
          },
          "role": {
            "description": "Specifies whether the message was sent by the user or the assistant.",
            "type": "string",
            "enum": ["user", "assistant"]
          },
          "finishReason": {
            "description": "The reason why the message generation finished.",
            "type": "string",
            "enum": [
              "stop",
              "length",
              "content-filter",
              "tool-calls",
              "error",
              "other",
              "unknown"
            ]
          },
          "apiUrl": {
            "description": "API URL to access this message via the API.",
            "type": "string"
          },
          "authorId": {
            "description": "The ID of the user who sent the message.",
            "type": ["string", "null"]
          },
          "parentId": {
            "description": "The ID of the parent message.",
            "type": ["string", "null"]
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "description": "The URL where the attachment file can be accessed.",
                  "type": "string"
                },
                "name": {
                  "description": "The original filename of the attachment.",
                  "type": "string"
                },
                "contentType": {
                  "description": "The MIME type of the attachment file (e.g., image/png, application/pdf).",
                  "type": "string"
                },
                "size": {
                  "description": "The size of the attachment file in bytes.",
                  "type": "number"
                },
                "content": {
                  "description": "The base64-encoded content of the attachment file, if available.",
                  "type": "string"
                },
                "type": {
                  "description": "Optional v0-specific attachment type for enhanced processing.",
                  "type": "string",
                  "enum": ["screenshot", "figma", "zip"]
                }
              },
              "required": ["url", "size"],
              "additionalProperties": false
            }
          }
        },
        "required": [
          "id",
          "object",
          "content",
          "createdAt",
          "type",
          "role",
          "apiUrl",
          "authorId"
        ],
        "additionalProperties": false
      },
      "MessageSummaryList": {
        "description": "List response containing multiple message summaries with cursor-based pagination.",
        "type": "object",
        "properties": {
          "object": {
            "description": "Fixed value identifying this as a list response.",
            "type": "string",
            "const": "list"
          },
          "data": {
            "description": "Array of message summaries in this page of results.",
            "type": "array",
            "items": {
              "description": "Summary of a single message within a chat, including role, content, type, timestamp, and API URL.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "A unique identifier for the message.",
                  "type": "string"
                },
                "object": {
                  "description": "Fixed value identifying this object as a message.",
                  "type": "string",
                  "const": "message"
                },
                "content": {
                  "description": "The main text content of the message.",
                  "type": "string"
                },
                "experimental_content": {
                  "description": "The parsed content of the message as an array structure containing AST nodes. This is an experimental field that may change.",
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "description": "AST content section containing parsed markdown/MDX nodes",
                        "type": "array",
                        "prefixItems": [
                          {
                            "type": "number",
                            "const": 0
                          },
                          {
                            "type": "array",
                            "items": {}
                          }
                        ]
                      },
                      {
                        "description": "Metadata section containing title and other properties",
                        "type": "array",
                        "prefixItems": [
                          {
                            "type": "number",
                            "const": 1
                          },
                          {
                            "type": "object",
                            "properties": {
                              "~standard": {
                                "type": "string"
                              },
                              "def": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              },
                              "check": {
                                "type": "string"
                              },
                              "clone": {
                                "type": "string"
                              },
                              "brand": {
                                "type": "string"
                              },
                              "register": {
                                "type": "string"
                              },
                              "parse": {
                                "type": "string"
                              },
                              "safeParse": {
                                "type": "string"
                              },
                              "parseAsync": {
                                "type": "string"
                              },
                              "safeParseAsync": {
                                "type": "string"
                              },
                              "spa": {
                                "type": "string"
                              },
                              "encode": {
                                "type": "string"
                              },
                              "decode": {
                                "type": "string"
                              },
                              "encodeAsync": {
                                "type": "string"
                              },
                              "decodeAsync": {
                                "type": "string"
                              },
                              "safeEncode": {
                                "type": "string"
                              },
                              "safeDecode": {
                                "type": "string"
                              },
                              "safeEncodeAsync": {
                                "type": "string"
                              },
                              "safeDecodeAsync": {
                                "type": "string"
                              },
                              "refine": {
                                "type": "string"
                              },
                              "superRefine": {
                                "type": "string"
                              },
                              "overwrite": {
                                "type": "string"
                              },
                              "optional": {
                                "type": "string"
                              },
                              "nullable": {
                                "type": "string"
                              },
                              "nullish": {
                                "type": "string"
                              },
                              "nonoptional": {
                                "type": "string"
                              },
                              "array": {
                                "type": "string"
                              },
                              "or": {
                                "type": "string"
                              },
                              "and": {
                                "type": "string"
                              },
                              "transform": {
                                "type": "string"
                              },
                              "default": {
                                "type": "string"
                              },
                              "prefault": {
                                "type": "string"
                              },
                              "catch": {
                                "type": "string"
                              },
                              "pipe": {
                                "type": "string"
                              },
                              "readonly": {
                                "type": "string"
                              },
                              "describe": {
                                "type": "string"
                              },
                              "meta": {
                                "type": "string"
                              },
                              "isOptional": {
                                "type": "string"
                              },
                              "isNullable": {
                                "type": "string"
                              },
                              "keyof": {
                                "type": "string"
                              },
                              "catchall": {
                                "type": "string"
                              },
                              "passthrough": {
                                "type": "string"
                              },
                              "loose": {
                                "type": "string"
                              },
                              "strict": {
                                "type": "string"
                              },
                              "strip": {
                                "type": "string"
                              },
                              "extend": {
                                "type": "string"
                              },
                              "safeExtend": {
                                "type": "string"
                              },
                              "merge": {
                                "type": "string"
                              },
                              "pick": {
                                "type": "string"
                              },
                              "omit": {
                                "type": "string"
                              },
                              "partial": {
                                "type": "string"
                              },
                              "required": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "~standard",
                              "def",
                              "type",
                              "check",
                              "clone",
                              "brand",
                              "register",
                              "parse",
                              "safeParse",
                              "parseAsync",
                              "safeParseAsync",
                              "spa",
                              "encode",
                              "decode",
                              "encodeAsync",
                              "decodeAsync",
                              "safeEncode",
                              "safeDecode",
                              "safeEncodeAsync",
                              "safeDecodeAsync",
                              "refine",
                              "superRefine",
                              "overwrite",
                              "optional",
                              "nullable",
                              "nullish",
                              "nonoptional",
                              "array",
                              "or",
                              "and",
                              "transform",
                              "default",
                              "prefault",
                              "catch",
                              "pipe",
                              "readonly",
                              "describe",
                              "meta",
                              "isOptional",
                              "isNullable",
                              "keyof",
                              "catchall",
                              "passthrough",
                              "loose",
                              "strict",
                              "strip",
                              "extend",
                              "safeExtend",
                              "merge",
                              "pick",
                              "omit",
                              "partial",
                              "required"
                            ],
                            "additionalProperties": false
                          }
                        ]
                      }
                    ]
                  }
                },
                "createdAt": {
                  "description": "The ISO timestamp representing when the message was created.",
                  "type": "string"
                },
                "updatedAt": {
                  "description": "The ISO timestamp representing when the message was last updated.",
                  "type": "string",
                  "format": "date-time",
                  "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                },
                "type": {
                  "description": "Indicates the format or category of the message, such as plain text or code.",
                  "type": "string",
                  "enum": [
                    "message",
                    "forked-block",
                    "forked-chat",
                    "open-in-v0",
                    "refinement",
                    "added-environment-variables",
                    "added-integration",
                    "deleted-file",
                    "moved-file",
                    "renamed-file",
                    "edited-file",
                    "replace-src",
                    "reverted-block",
                    "fix-with-v0",
                    "auto-fix-with-v0",
                    "sync-git"
                  ]
                },
                "role": {
                  "description": "Specifies whether the message was sent by the user or the assistant.",
                  "type": "string",
                  "enum": ["user", "assistant"]
                },
                "finishReason": {
                  "description": "The reason why the message generation finished.",
                  "type": "string",
                  "enum": [
                    "stop",
                    "length",
                    "content-filter",
                    "tool-calls",
                    "error",
                    "other",
                    "unknown"
                  ]
                },
                "apiUrl": {
                  "description": "API URL to access this message via the API.",
                  "type": "string"
                },
                "authorId": {
                  "description": "The ID of the user who sent the message.",
                  "type": ["string", "null"]
                },
                "parentId": {
                  "description": "The ID of the parent message.",
                  "type": ["string", "null"]
                },
                "attachments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "description": "The URL where the attachment file can be accessed.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The original filename of the attachment.",
                        "type": "string"
                      },
                      "contentType": {
                        "description": "The MIME type of the attachment file (e.g., image/png, application/pdf).",
                        "type": "string"
                      },
                      "size": {
                        "description": "The size of the attachment file in bytes.",
                        "type": "number"
                      },
                      "content": {
                        "description": "The base64-encoded content of the attachment file, if available.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Optional v0-specific attachment type for enhanced processing.",
                        "type": "string",
                        "enum": ["screenshot", "figma", "zip"]
                      }
                    },
                    "required": ["url", "size"],
                    "additionalProperties": false
                  }
                }
              },
              "required": [
                "id",
                "object",
                "content",
                "createdAt",
                "type",
                "role",
                "apiUrl",
                "authorId"
              ],
              "additionalProperties": false
            }
          },
          "pagination": {
            "description": "Pagination metadata for navigating through multiple pages of results.",
            "type": "object",
            "properties": {
              "hasMore": {
                "description": "Indicates if there are more results available beyond this page.",
                "type": "boolean"
              },
              "nextCursor": {
                "description": "Cursor for fetching the next page of results.",
                "type": "string"
              },
              "nextUrl": {
                "description": "API URL for retrieving the next page of results.",
                "type": "string"
              }
            },
            "required": ["hasMore"],
            "additionalProperties": false
          }
        },
        "required": ["object", "data", "pagination"],
        "additionalProperties": false
      },
      "NotificationPreferenceSchema": {
        "description": "User preference for notification delivery methods.",
        "type": "object",
        "properties": {
          "liveActivity": {
            "description": "Whether the user wants to receive live activities.",
            "type": "boolean"
          },
          "pushNotifications": {
            "description": "Whether the user wants to receive push notifications.",
            "type": "boolean"
          }
        },
        "required": ["liveActivity", "pushNotifications"],
        "additionalProperties": false
      },
      "ProductDetailSchema": {
        "description": "Detailed information about a marketplace or store product.",
        "type": "object",
        "properties": {
          "object": {
            "description": "The object type.",
            "type": "string",
            "const": "product"
          },
          "id": {
            "description": "The unique ID of the product.",
            "type": "string"
          },
          "slug": {
            "description": "The URL-friendly slug of the product.",
            "type": "string"
          },
          "name": {
            "description": "The name of the product.",
            "type": "string"
          },
          "description": {
            "description": "A short description of the product.",
            "type": "string"
          },
          "iconUrl": {
            "description": "URL to the product icon.",
            "type": "string"
          },
          "iconBackgroundColor": {
            "description": "Background color for the product icon.",
            "type": "string"
          }
        },
        "required": ["object", "id", "slug", "name", "description", "iconUrl"],
        "additionalProperties": false
      },
      "ProductListSchema": {
        "description": "List of available marketplace and store products.",
        "type": "object",
        "properties": {
          "object": {
            "description": "Fixed value identifying this as a list response.",
            "type": "string",
            "const": "list"
          },
          "data": {
            "description": "Array of product summaries.",
            "type": "array",
            "items": {
              "description": "Summary information about a marketplace or store product.",
              "type": "object",
              "properties": {
                "object": {
                  "description": "The object type.",
                  "type": "string",
                  "const": "product"
                },
                "id": {
                  "description": "The unique ID of the product.",
                  "type": "string"
                },
                "slug": {
                  "description": "The URL-friendly slug of the product.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the product.",
                  "type": "string"
                },
                "description": {
                  "description": "A short description of the product.",
                  "type": "string"
                },
                "iconUrl": {
                  "description": "URL to the product icon.",
                  "type": "string"
                }
              },
              "required": [
                "object",
                "id",
                "slug",
                "name",
                "description",
                "iconUrl"
              ],
              "additionalProperties": false
            }
          }
        },
        "required": ["object", "data"],
        "additionalProperties": false
      },
      "ProductSummarySchema": {
        "description": "Summary information about a marketplace or store product.",
        "type": "object",
        "properties": {
          "object": {
            "description": "The object type.",
            "type": "string",
            "const": "product"
          },
          "id": {
            "description": "The unique ID of the product.",
            "type": "string"
          },
          "slug": {
            "description": "The URL-friendly slug of the product.",
            "type": "string"
          },
          "name": {
            "description": "The name of the product.",
            "type": "string"
          },
          "description": {
            "description": "A short description of the product.",
            "type": "string"
          },
          "iconUrl": {
            "description": "URL to the product icon.",
            "type": "string"
          }
        },
        "required": ["object", "id", "slug", "name", "description", "iconUrl"],
        "additionalProperties": false
      },
      "ProjectDetail": {
        "description": "Full representation of a project, including its associated chats.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the project.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a project.",
            "type": "string",
            "const": "project"
          },
          "name": {
            "description": "The name of the project as defined by the user.",
            "type": "string"
          },
          "privacy": {
            "description": "The privacy setting for the project - either private or team.",
            "type": "string",
            "enum": ["private", "team"]
          },
          "vercelProjectId": {
            "description": "Optional ID of the linked Vercel project, if connected.",
            "type": "string"
          },
          "createdAt": {
            "description": "The ISO timestamp representing when the project was created.",
            "type": "string",
            "format": "date-time",
            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
          },
          "updatedAt": {
            "description": "The ISO timestamp of the most recent update, if available.",
            "type": "string",
            "format": "date-time",
            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
          },
          "apiUrl": {
            "description": "The API endpoint URL for accessing this project programmatically.",
            "type": "string",
            "format": "uri"
          },
          "webUrl": {
            "description": "The web URL where the project can be viewed or managed.",
            "type": "string",
            "format": "uri"
          },
          "description": {
            "description": "The description of the project.",
            "type": "string"
          },
          "instructions": {
            "description": "The instructions for the project.",
            "type": "string"
          },
          "chats": {
            "description": "List of all chats that are associated with this project.",
            "type": "array",
            "items": {
              "description": "Summary of a chat, including metadata like privacy, author, latest version, and URLs.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "A unique identifier for the chat.",
                  "type": "string"
                },
                "object": {
                  "description": "Fixed value identifying this object as a chat.",
                  "type": "string",
                  "const": "chat"
                },
                "shareable": {
                  "description": "Indicates whether the chat can be shared via public link.",
                  "type": "boolean"
                },
                "privacy": {
                  "description": "Defines the visibility of the chat—private, team-only, or public.",
                  "type": "string",
                  "enum": ["public", "private", "team", "team-edit", "unlisted"]
                },
                "name": {
                  "description": "An optional name assigned to the chat by the user.",
                  "type": "string"
                },
                "title": {
                  "description": "Deprecated title field preserved for backward compatibility.",
                  "deprecated": true,
                  "type": "string"
                },
                "createdAt": {
                  "description": "The ISO timestamp representing when the chat was created.",
                  "type": "string",
                  "format": "date-time",
                  "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                },
                "updatedAt": {
                  "description": "The ISO timestamp of the last update to the chat.",
                  "type": "string"
                },
                "favorite": {
                  "description": "Indicates whether the chat is marked as a favorite.",
                  "type": "boolean"
                },
                "authorId": {
                  "description": "The ID of the user who created the chat.",
                  "type": "string"
                },
                "projectId": {
                  "description": "Optional ID of the v0 project associated with this chat.",
                  "type": "string"
                },
                "webUrl": {
                  "description": "Web URL to view this chat in the browser.",
                  "type": "string"
                },
                "apiUrl": {
                  "description": "API URL to access this chat via the API.",
                  "type": "string"
                },
                "latestVersion": {
                  "description": "The most recent generated version of the chat, if available.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "A unique identifier for the version.",
                      "type": "string"
                    },
                    "object": {
                      "description": "Fixed value identifying this object as a version.",
                      "type": "string",
                      "const": "version"
                    },
                    "status": {
                      "description": "The current status of the version generation process.",
                      "type": "string",
                      "enum": ["pending", "completed", "failed"]
                    },
                    "demoUrl": {
                      "description": "Optional URL for previewing the generated output.",
                      "type": "string"
                    },
                    "screenshotUrl": {
                      "description": "URL to retrieve a screenshot of this version.",
                      "type": "string"
                    },
                    "createdAt": {
                      "description": "The date and time when the version was created, in ISO 8601 format.",
                      "type": "string",
                      "format": "date-time",
                      "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                    },
                    "updatedAt": {
                      "description": "The date and time when the version was last updated, in ISO 8601 format.",
                      "type": "string",
                      "format": "date-time",
                      "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                    }
                  },
                  "required": ["id", "object", "status", "createdAt"],
                  "additionalProperties": false
                }
              },
              "required": [
                "id",
                "object",
                "shareable",
                "privacy",
                "createdAt",
                "favorite",
                "authorId",
                "webUrl",
                "apiUrl"
              ],
              "additionalProperties": false
            }
          }
        },
        "required": [
          "id",
          "object",
          "name",
          "privacy",
          "createdAt",
          "apiUrl",
          "webUrl",
          "chats"
        ],
        "additionalProperties": false
      },
      "ProjectSummary": {
        "description": "Summary of a project, including metadata, timestamps, and optional Vercel linkage.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the project.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a project.",
            "type": "string",
            "const": "project"
          },
          "name": {
            "description": "The name of the project as defined by the user.",
            "type": "string"
          },
          "privacy": {
            "description": "The privacy setting for the project - either private or team.",
            "type": "string",
            "enum": ["private", "team"]
          },
          "vercelProjectId": {
            "description": "Optional ID of the linked Vercel project, if connected.",
            "type": "string"
          },
          "createdAt": {
            "description": "The ISO timestamp representing when the project was created.",
            "type": "string",
            "format": "date-time",
            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
          },
          "updatedAt": {
            "description": "The ISO timestamp of the most recent update, if available.",
            "type": "string",
            "format": "date-time",
            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
          },
          "apiUrl": {
            "description": "The API endpoint URL for accessing this project programmatically.",
            "type": "string",
            "format": "uri"
          },
          "webUrl": {
            "description": "The web URL where the project can be viewed or managed.",
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "id",
          "object",
          "name",
          "privacy",
          "createdAt",
          "apiUrl",
          "webUrl"
        ],
        "additionalProperties": false
      },
      "ScopeSummary": {
        "description": "Basic information about a workspace or identity context for projects and chats.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the scope (e.g., user or team workspace).",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a scope.",
            "type": "string",
            "const": "scope"
          },
          "name": {
            "description": "An optional human-readable name for the scope.",
            "type": "string"
          }
        },
        "required": ["id", "object"],
        "additionalProperties": false
      },
      "SearchResultItem": {
        "description": "Generic result returned from a search query, representing either a chat or a project.",
        "type": "object",
        "properties": {
          "id": {
            "description": "The unique ID of the item returned in the search result.",
            "type": "string"
          },
          "object": {
            "description": "Type of item returned, either 'chat' or 'project'.",
            "type": "string",
            "enum": ["chat", "project"]
          },
          "name": {
            "description": "The display name of the item.",
            "type": "string"
          },
          "createdAt": {
            "description": "The ISO timestamp representing when the item was created.",
            "type": "string",
            "format": "date-time",
            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
          },
          "updatedAt": {
            "description": "The ISO timestamp of the last update to the item.",
            "type": "string",
            "format": "date-time",
            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
          },
          "apiUrl": {
            "description": "API endpoint for accessing the item programmatically.",
            "type": "string"
          },
          "webUrl": {
            "description": "Web URL for viewing the item in the interface.",
            "type": "string"
          }
        },
        "required": ["id", "object", "name", "createdAt", "apiUrl", "webUrl"],
        "additionalProperties": false
      },
      "UserDetail": {
        "description": "Details of the authenticated user, including profile and contact information.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the user.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a user.",
            "type": "string",
            "const": "user"
          },
          "name": {
            "description": "Optional full name of the user.",
            "type": "string"
          },
          "email": {
            "description": "The user’s email address.",
            "type": "string"
          },
          "avatar": {
            "description": "URL to the user’s avatar image.",
            "type": "string"
          }
        },
        "required": ["id", "object", "email", "avatar"],
        "additionalProperties": false
      },
      "UserPreferencesPostResponseSchema": {
        "description": "Response schema for updating user preferences.",
        "type": "object",
        "properties": {
          "object": {
            "description": "Object type identifier.",
            "type": "string",
            "const": "user_preferences"
          },
          "preferences": {
            "description": "The updated preferences if successful, or null if failed.",
            "anyOf": [
              {
                "description": "User preferences configuration including notification settings.",
                "type": "object",
                "properties": {
                  "notifications": {
                    "description": "The user's preferred method for receiving notifications.",
                    "type": "object",
                    "properties": {
                      "liveActivity": {
                        "description": "Whether the user wants to receive live activities.",
                        "type": "boolean"
                      },
                      "pushNotifications": {
                        "description": "Whether the user wants to receive push notifications.",
                        "type": "boolean"
                      }
                    },
                    "required": ["liveActivity", "pushNotifications"],
                    "additionalProperties": false
                  }
                },
                "required": ["notifications"],
                "additionalProperties": false
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": ["object", "preferences"],
        "additionalProperties": false
      },
      "UserPreferencesResponseSchema": {
        "description": "Response schema for retrieving user preferences.",
        "type": "object",
        "properties": {
          "object": {
            "description": "Object type identifier.",
            "type": "string",
            "const": "user_preferences"
          },
          "preferences": {
            "description": "The user's current preferences, or null if errored.",
            "anyOf": [
              {
                "description": "User preferences configuration including notification settings.",
                "type": "object",
                "properties": {
                  "notifications": {
                    "description": "The user's preferred method for receiving notifications.",
                    "type": "object",
                    "properties": {
                      "liveActivity": {
                        "description": "Whether the user wants to receive live activities.",
                        "type": "boolean"
                      },
                      "pushNotifications": {
                        "description": "Whether the user wants to receive push notifications.",
                        "type": "boolean"
                      }
                    },
                    "required": ["liveActivity", "pushNotifications"],
                    "additionalProperties": false
                  }
                },
                "required": ["notifications"],
                "additionalProperties": false
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": ["object", "preferences"],
        "additionalProperties": false
      },
      "UserPreferencesSchema": {
        "description": "User preferences configuration including notification settings.",
        "type": "object",
        "properties": {
          "notifications": {
            "description": "The user's preferred method for receiving notifications.",
            "type": "object",
            "properties": {
              "liveActivity": {
                "description": "Whether the user wants to receive live activities.",
                "type": "boolean"
              },
              "pushNotifications": {
                "description": "Whether the user wants to receive push notifications.",
                "type": "boolean"
              }
            },
            "required": ["liveActivity", "pushNotifications"],
            "additionalProperties": false
          }
        },
        "required": ["notifications"],
        "additionalProperties": false
      },
      "VercelProjectDetail": {
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the linked Vercel project.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a Vercel project.",
            "type": "string",
            "const": "vercel_project"
          },
          "name": {
            "description": "The name of the Vercel project.",
            "type": "string"
          }
        },
        "required": ["id", "object", "name"],
        "additionalProperties": false
      },
      "VercelProjectSummary": {
        "description": "Basic metadata about a Vercel project connected to a v0 project.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the linked Vercel project.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a Vercel project.",
            "type": "string",
            "const": "vercel_project"
          },
          "name": {
            "description": "The name of the Vercel project.",
            "type": "string"
          }
        },
        "required": ["id", "object", "name"],
        "additionalProperties": false
      },
      "VersionDetail": {
        "description": "Detailed version data including file contents.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the version.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a version.",
            "type": "string",
            "const": "version"
          },
          "status": {
            "description": "The current status of the version generation process.",
            "type": "string",
            "enum": ["pending", "completed", "failed"]
          },
          "demoUrl": {
            "description": "Optional URL for previewing the generated output.",
            "type": "string"
          },
          "screenshotUrl": {
            "description": "URL to retrieve a screenshot of this version.",
            "type": "string"
          },
          "createdAt": {
            "description": "The date and time when the version was created, in ISO 8601 format.",
            "type": "string",
            "format": "date-time",
            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
          },
          "updatedAt": {
            "description": "The date and time when the version was last updated, in ISO 8601 format.",
            "type": "string",
            "format": "date-time",
            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
          },
          "files": {
            "description": "A list of files that were generated or included in this version.",
            "type": "array",
            "items": {
              "description": "Detailed representation of a file, including its content and lock status.",
              "type": "object",
              "properties": {
                "object": {
                  "description": "Fixed value identifying this object as a file.",
                  "type": "string",
                  "const": "file"
                },
                "name": {
                  "description": "The name of the file, including its extension.",
                  "type": "string"
                },
                "content": {
                  "description": "The full contents of the file as a raw string.",
                  "type": "string"
                },
                "locked": {
                  "description": "Whether the file is locked to prevent AI from overwriting it during new version generation.",
                  "type": "boolean"
                }
              },
              "required": ["object", "name", "content", "locked"],
              "additionalProperties": false
            }
          }
        },
        "required": ["id", "object", "status", "createdAt", "files"],
        "additionalProperties": false
      },
      "VersionSummary": {
        "description": "Summary of a generated version of a chat, including its status and optional demo link.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the version.",
            "type": "string"
          },
          "object": {
            "description": "Fixed value identifying this object as a version.",
            "type": "string",
            "const": "version"
          },
          "status": {
            "description": "The current status of the version generation process.",
            "type": "string",
            "enum": ["pending", "completed", "failed"]
          },
          "demoUrl": {
            "description": "Optional URL for previewing the generated output.",
            "type": "string"
          },
          "screenshotUrl": {
            "description": "URL to retrieve a screenshot of this version.",
            "type": "string"
          },
          "createdAt": {
            "description": "The date and time when the version was created, in ISO 8601 format.",
            "type": "string",
            "format": "date-time",
            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
          },
          "updatedAt": {
            "description": "The date and time when the version was last updated, in ISO 8601 format.",
            "type": "string",
            "format": "date-time",
            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
          }
        },
        "required": ["id", "object", "status", "createdAt"],
        "additionalProperties": false
      },
      "VersionSummaryList": {
        "description": "List response containing multiple version summaries with cursor-based pagination.",
        "type": "object",
        "properties": {
          "object": {
            "description": "Fixed value identifying this as a list response.",
            "type": "string",
            "const": "list"
          },
          "data": {
            "description": "Array of version summaries in this page of results.",
            "type": "array",
            "items": {
              "description": "Summary of a generated version of a chat, including its status and optional demo link.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "A unique identifier for the version.",
                  "type": "string"
                },
                "object": {
                  "description": "Fixed value identifying this object as a version.",
                  "type": "string",
                  "const": "version"
                },
                "status": {
                  "description": "The current status of the version generation process.",
                  "type": "string",
                  "enum": ["pending", "completed", "failed"]
                },
                "demoUrl": {
                  "description": "Optional URL for previewing the generated output.",
                  "type": "string"
                },
                "screenshotUrl": {
                  "description": "URL to retrieve a screenshot of this version.",
                  "type": "string"
                },
                "createdAt": {
                  "description": "The date and time when the version was created, in ISO 8601 format.",
                  "type": "string",
                  "format": "date-time",
                  "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                },
                "updatedAt": {
                  "description": "The date and time when the version was last updated, in ISO 8601 format.",
                  "type": "string",
                  "format": "date-time",
                  "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                }
              },
              "required": ["id", "object", "status", "createdAt"],
              "additionalProperties": false
            }
          },
          "pagination": {
            "description": "Pagination metadata for navigating through multiple pages of results.",
            "type": "object",
            "properties": {
              "hasMore": {
                "description": "Indicates if there are more results available beyond this page.",
                "type": "boolean"
              },
              "nextCursor": {
                "description": "Cursor for fetching the next page of results.",
                "type": "string"
              },
              "nextUrl": {
                "description": "API URL for retrieving the next page of results.",
                "type": "string"
              }
            },
            "required": ["hasMore"],
            "additionalProperties": false
          }
        },
        "required": ["object", "data", "pagination"],
        "additionalProperties": false
      },
      "UnauthorizedError": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "const": "unauthorized_error"
              }
            },
            "required": ["message", "type"],
            "additionalProperties": false
          }
        },
        "required": ["error"],
        "additionalProperties": false
      },
      "ForbiddenError": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "const": "forbidden_error"
              }
            },
            "required": ["message", "type"],
            "additionalProperties": false
          }
        },
        "required": ["error"],
        "additionalProperties": false
      },
      "NotFoundError": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "const": "not_found_error"
              }
            },
            "required": ["message", "type"],
            "additionalProperties": false
          }
        },
        "required": ["error"],
        "additionalProperties": false
      },
      "ConflictError": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "const": "conflict_error"
              }
            },
            "required": ["message", "type"],
            "additionalProperties": false
          }
        },
        "required": ["error"],
        "additionalProperties": false
      },
      "PayloadTooLargeError": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "const": "payload_too_large_error"
              }
            },
            "required": ["message", "type"],
            "additionalProperties": false
          }
        },
        "required": ["error"],
        "additionalProperties": false
      },
      "UnprocessableEntityError": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "const": "unprocessable_entity_error"
              }
            },
            "required": ["message", "type"],
            "additionalProperties": false
          }
        },
        "required": ["error"],
        "additionalProperties": false
      },
      "TooManyRequestsError": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "const": "too_many_requests_error"
              }
            },
            "required": ["message", "type"],
            "additionalProperties": false
          }
        },
        "required": ["error"],
        "additionalProperties": false
      },
      "InternalServerError": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "const": "internal_server_error"
              }
            },
            "required": ["message", "type"],
            "additionalProperties": false
          }
        },
        "required": ["error"],
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Your v0 API key. Get one at https://v0.app/chat/settings/keys"
      }
    }
  }
}
